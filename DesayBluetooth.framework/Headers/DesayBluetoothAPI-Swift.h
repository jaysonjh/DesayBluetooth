// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreBluetooth;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
typedef SWIFT_ENUM(NSInteger, APIState) {
  APIStateNormal = 0,
  APIStateDfu = 1,
};

@class ScanConnectHandler;

SWIFT_CLASS("_TtC17DesayBluetoothAPI13BLEAPIManager")
@interface BLEAPIManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEAPIManager * _Nonnull shared;)
+ (BLEAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 处理扫描连接
@property (nonatomic, readonly, strong) ScanConnectHandler * _Nonnull scanConnectHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)setAPIModeWithIsDebug:(BOOL)isDebug;
- (BOOL)apiMode SWIFT_WARN_UNUSED_RESULT;
@end

@protocol DSBLEBindDelegate;
@protocol DSBLESyncDelegate;
enum DSBLEAutoType : NSUInteger;
@protocol DSBLEDFUDelegate;
enum DSBLEFuncType : NSUInteger;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetoothAPI))
/// 是否OK
@property (nonatomic, readonly) BOOL isReady;
/// API State
@property (nonatomic, readonly) enum APIState apiState;
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// DFU代理
@property (nonatomic, strong) id <DSBLEDFUDelegate> _Nullable dfuDelegate;
/// 方法
/// \param funcType 类型
///
/// \param data 数据
///
/// \param callback 反馈
///
- (void)makeWithFuncType:(enum DSBLEFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC17DesayBluetoothAPI9BLEDefine")
@interface BLEDefine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultOK;)
+ (NSString * _Nonnull)resultOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultERR;)
+ (NSString * _Nonnull)resultERR SWIFT_WARN_UNUSED_RESULT;
/// MAC 地址长度
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger macLen;)
+ (NSInteger)macLen SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sleepDataKey;)
+ (NSString * _Nonnull)sleepDataKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull stepDataKey;)
+ (NSString * _Nonnull)stepDataKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hrDataKey;)
+ (NSString * _Nonnull)hrDataKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pressureDataKey;)
+ (NSString * _Nonnull)pressureDataKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCentralManager;
enum BLEManagerState : NSUInteger;
@class CBUUID;

SWIFT_CLASS("_TtC17DesayBluetoothAPI10BLEManager")
@interface BLEManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEManager * _Nonnull shared;)
+ (BLEManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 中心
@property (nonatomic, readonly, strong) CBCentralManager * _Nonnull centralManager;
/// 状态
@property (nonatomic, readonly) enum BLEManagerState state;
/// 是否扫描
@property (nonatomic, readonly) BOOL isScaning;
/// 服务通道列表 /// 在调用连接前要配置好，不然无效
@property (nonatomic, copy) NSArray<CBUUID *> * _Nullable discoverServices;
/// 需要设置notify的特征值列表 /// 在调用连接前要配置好，不然无效
@property (nonatomic, copy) NSArray<CBUUID *> * _Nullable needNotifycharacteristics;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class BLEPeripheral;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
- (BLEPeripheral * _Nullable)peripheralBy:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
/// 扫描设备
- (void)scanForPeripheralsWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options;
/// 停止扫描
- (void)stopScan;
@end

@protocol BLEManagerDelegate;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
- (void)addDelegate:(id <BLEManagerDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <BLEManagerDelegate> _Nonnull)delegate;
@end

@class CBCharacteristic;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
/// 读取
/// \param characteristic 特征值
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral readValuefor:(CBCharacteristic * _Nonnull)characteristic;
/// 写数据
/// \param data 数据
///
/// \param characteristic 类型
///
/// \param type 类型，默认无反馈
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral writeValue:(NSData * _Nonnull)data for:(CBCharacteristic * _Nonnull)characteristic type:(CBCharacteristicWriteType)type;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
/// 扫描后连接设备
/// \param peripheral 设备
///
- (void)connect:(BLEPeripheral * _Nonnull)peripheral options:(NSDictionary<NSString *, id> * _Nullable)options;
/// identifiers连接
/// \param identifiers identifiers
///
///
/// returns:
/// 设备列表
- (NSArray<BLEPeripheral *> * _Nonnull)retrievePeripheralsWithIdentifiers:(NSArray<NSUUID *> * _Nonnull)identifiers SWIFT_WARN_UNUSED_RESULT;
/// 连接已经连接的设备
/// \param serviceUUIDs 服务列表
///
///
/// returns:
/// 设备列表
- (NSArray<BLEPeripheral *> * _Nonnull)retrieveConnectedPeripheralsWithServices:(NSArray<CBUUID *> * _Nonnull)serviceUUIDs SWIFT_WARN_UNUSED_RESULT;
/// 断开设备连接
/// \param peripheral 设备
///
- (void)disConnect:(BLEPeripheral * _Nonnull)peripheral;
@end

@class CBPeripheral;
@class NSNumber;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

@class CBService;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetoothAPI))
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didReadRSSI:(NSNumber * _Nonnull)RSSI error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP17DesayBluetoothAPI18BLEManagerDelegate_")
@protocol BLEManagerDelegate
@optional
/// 蓝牙状态反馈
/// \param state 状态
///
- (void)didUpdateState:(enum BLEManagerState)state;
/// 扫描发现设备反馈
/// \param peripheral 设备
///
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// 设备连接还是断开
/// \param peripheral 设备
///
/// \param isReady 连接且准备OK，还是断开
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
/// 数据反馈
/// \param peripheral 设备
///
/// \param characteristic 通道
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// 写完数据反馈
/// \param peripheral 设备
///
/// \param characteristic 通道
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didWriteValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

typedef SWIFT_ENUM(NSUInteger, BLEManagerState) {
  BLEManagerStateOff = 0,
  BLEManagerStateOn = 1,
};


/// 模型
SWIFT_CLASS("_TtC17DesayBluetoothAPI13BLEPeripheral")
@interface BLEPeripheral : NSObject
/// CBPeripheral
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull cbPeripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nonnull services;
@property (nonatomic, readonly, copy) NSArray<CBCharacteristic *> * _Nonnull characteristics;
@property (nonatomic, readonly, strong) NSNumber * _Nonnull rssi;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull advertisementData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17DesayBluetoothAPI13BLEScanDevice")
@interface BLEScanDevice : NSObject
/// MAC
@property (nonatomic, readonly, copy) NSString * _Nonnull mac;
/// OTA? 0 正常 1 OTA
@property (nonatomic, readonly) BOOL state;
/// 设备
@property (nonatomic, readonly, strong) BLEPeripheral * _Nonnull dsPeripheral;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class DSBLESleepBlock;
@class DSBLESleepInfo;

SWIFT_CLASS("_TtC17DesayBluetoothAPI17BLESleepAlgorithm")
@interface BLESleepAlgorithm : NSObject
/// 分析睡眠数据
/// @param rawData 睡眠原始数据
/// @return 睡眠状态 NSArray<WMSleepInfo *>
- (NSArray<DSBLESleepInfo *> * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17DesayBluetoothAPI30BLESleepAlgorithmConfiguration")
@interface BLESleepAlgorithmConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEConfigurationFileName;)
+ (NSString * _Nonnull)kDSBLEConfigurationFileName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEDayMaxTimeDeepSleep;)
+ (NSString * _Nonnull)kDSBLEDayMaxTimeDeepSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLENightMaxTimeDeepSleep;)
+ (NSString * _Nonnull)kDSBLENightMaxTimeDeepSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEPercLightSleep;)
+ (NSString * _Nonnull)kDSBLEPercLightSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEWakeup;)
+ (NSString * _Nonnull)kDSBLEWakeup SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEDaySleepTime;)
+ (NSString * _Nonnull)kDSBLEDaySleepTime SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEOtherSleepTime;)
+ (NSString * _Nonnull)kDSBLEOtherSleepTime SWIFT_WARN_UNUSED_RESULT;
/// 单例 加载默认设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLESleepAlgorithmConfiguration * _Nonnull shared;)
+ (BLESleepAlgorithmConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 单例 从文件中读取睡眠参数(用于日后可以网络下载参数，进行算法的变更)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLESleepAlgorithmConfiguration * _Nonnull sharedFromUserDefault;)
+ (BLESleepAlgorithmConfiguration * _Nonnull)sharedFromUserDefault SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum DSBLEProtocolType : NSUInteger;

SWIFT_CLASS("_TtC17DesayBluetoothAPI7BLEUtil")
@interface BLEUtil : NSObject
/// 广播信息转换为Mac
/// \param data 广播信息
///
///
/// returns:
/// mac
+ (NSString * _Nullable)macByAdData:(NSData * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备类型
/// \param devName 设备名
///
///
/// returns:
/// 设备类型
+ (enum DSBLEProtocolType)protocolTypeBy:(NSString * _Nonnull)devName SWIFT_WARN_UNUSED_RESULT;
/// 根据厂商代码获取设备名字
/// \param manuCode 厂商代码
///
///
/// returns:
/// 设备名字
+ (NSString * _Nonnull)deviceNameBy:(NSString * _Nonnull)manuCode SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名字获取厂商代码
/// \param name 设备名字
///
///
/// returns:
/// 厂商代码
+ (NSString * _Nonnull)manuCodeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// alarm class
SWIFT_CLASS("_TtC17DesayBluetoothAPI10DSBLEAlarm")
@interface DSBLEAlarm : NSObject
/// Alarm No. Default = 0
@property (nonatomic) NSUInteger alarmNO;
/// Main switch 主开关
@property (nonatomic) BOOL switchStatus;
/// Eg Time: 0800
@property (nonatomic, copy) NSString * _Nonnull alarmTime;
/// Monday switch 周一开关
@property (nonatomic) BOOL mondaySwitch;
/// Tuesday switch 周二开关
@property (nonatomic) BOOL tuesdaySwitch;
/// Wednesday swtich 周三开关
@property (nonatomic) BOOL wednesdaySwitch;
/// Thursday switch 周四开关
@property (nonatomic) BOOL thursdaySwitch;
/// Friday switch 周五开关
@property (nonatomic) BOOL fridaySwitch;
/// Saturday switch 周六开关
@property (nonatomic) BOOL saturdaySwitch;
/// Sunday switch 周日开关
@property (nonatomic) BOOL sundaySwitch;
+ (DSBLEAlarm * _Nullable)alarmWithFormat:(NSString * _Nonnull)format index:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// ANCS提示设置类
/// ANCS Setting class
SWIFT_CLASS("_TtC17DesayBluetoothAPI14DSBLEAppNotify")
@interface DSBLEAppNotify : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyPhoneCall;)
+ (NSString * _Nonnull)kDSBLEAppNotifyPhoneCall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyMessage;)
+ (NSString * _Nonnull)kDSBLEAppNotifyMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWechat;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWechat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyQQ;)
+ (NSString * _Nonnull)kDSBLEAppNotifyQQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyFacebook;)
+ (NSString * _Nonnull)kDSBLEAppNotifyFacebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyTwitter;)
+ (NSString * _Nonnull)kDSBLEAppNotifyTwitter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyEmail;)
+ (NSString * _Nonnull)kDSBLEAppNotifyEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWhatsApp;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWhatsApp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyInstagram;)
+ (NSString * _Nonnull)kDSBLEAppNotifyInstagram SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyLine;)
+ (NSString * _Nonnull)kDSBLEAppNotifyLine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifySkype;)
+ (NSString * _Nonnull)kDSBLEAppNotifySkype SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWeibo;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWeibo SWIFT_WARN_UNUSED_RESULT;
/// create new App Notify
/// \param dict Dictionary include All reminder setting
///
///
/// returns:
/// DSBLEAppNotify instance
+ (DSBLEAppNotify * _Nullable)appNotifyWithDict:(NSDictionary<NSString *, NSNumber *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNotifyWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Bracelet Notify
/// <ul>
///   <li>
///     Auto_CheckHR: Check HR result
///   </li>
///   <li>
///     Auto_SportHR: Real time sport HR
///   </li>
///   <li>
///     Auto_Step: Real time step
///   </li>
///   <li>
///     Auto_FindPhone: Location phone
///   </li>
///   <li>
///     Auto_MusicControl: Musci Control
///   </li>
///   <li>
///     Auto_NoSleep: No sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAutoType) {
  DSBLEAutoTypeCheckHR = 0,
  DSBLEAutoTypeSportHR = 1,
  DSBLEAutoTypeStep = 2,
  DSBLEAutoTypeFindPhone = 3,
  DSBLEAutoTypeMusicControl = 4,
  DSBLEAutoTypeNoSleep = 5,
  DSBLEAutoTypeBloodPressure = 6,
  DSBLEAutoTypeOxygen = 7,
  DSBLEAutoTypeCamera = 8,
  DSBLEAutoTypeCalorie = 9,
};

enum DSBLEBindingState : NSUInteger;

/// 绑定 过程
SWIFT_PROTOCOL("_TtP17DesayBluetoothAPI17DSBLEBindDelegate_")
@protocol DSBLEBindDelegate
/// 处理绑定状态
/// \param state 绑定状态
///
- (void)handleBindState:(enum DSBLEBindingState)state;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEBindingState) {
  DSBLEBindingStateIdel = 0,
  DSBLEBindingStateBond = 1,
  DSBLEBindingStateActive = 2,
  DSBLEBindingStateSuccess = 3,
  DSBLEBindingStateFail = 4,
};


/// 血压数据
/// Blood Pressure class
SWIFT_CLASS("_TtC17DesayBluetoothAPI18DSBLEBloodPressure")
@interface DSBLEBloodPressure : NSObject
/// Time for Blood Pressure
@property (nonatomic, copy) NSString * _Nonnull time;
/// 心肌收縮（systole）
@property (nonatomic) NSUInteger systole;
/// 心肌舒張（diastole）
@property (nonatomic) NSUInteger diastole;
/// Time for Blood Pressure -UTC
@property (nonatomic, copy) NSDate * _Nonnull utcTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Set Blood Pressure pramas (Only for DS-D8)
SWIFT_CLASS("_TtC17DesayBluetoothAPI21DSBLEBloodPressureSet")
@interface DSBLEBloodPressureSet : NSObject
/// true for begin blood pressure, false for stop blood pressure
@property (nonatomic) BOOL on;
/// systole for proof test value
@property (nonatomic) NSUInteger systole;
/// diastole for proof test value
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DFU 过程
SWIFT_PROTOCOL("_TtP17DesayBluetoothAPI16DSBLEDFUDelegate_")
@protocol DSBLEDFUDelegate
/// DFU进度
/// \param progress 进度
///
- (void)DFUProgress:(float)progress;
/// DFU开始
- (void)DFUStart;
/// DFU结束，成功
- (void)DFUEnd;
/// DFU出错
/// \param error 出错原因
///
- (void)DFUError:(NSString * _Nonnull)error;
@end


/// Set DFU
SWIFT_CLASS("_TtC17DesayBluetoothAPI11DSBLEDFUSet")
@interface DSBLEDFUSet : NSObject
/// device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// device MAC 12 count
@property (nonatomic, copy) NSString * _Nonnull deviceMac;
/// file path
@property (nonatomic, copy) NSString * _Nonnull filePath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Send Func Type
/// <ul>
///   <li>
///     Func_Alarm: Alarm
///   </li>
///   <li>
///     Func_Target: daily step target
///   </li>
///   <li>
///     Func_Notification: Notification reminder
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Reboot: Reboot bracelet
///   </li>
///   <li>
///     Func_Bind: Bind braceelt
///   </li>
///   <li>
///     Func_UserInfo: User Info（height,Weight）
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Language: Language Setting
///   </li>
///   <li>
///     Func_WristingTime: Wear habit and Writing time
///   </li>
///   <li>
///     Func_Sedentary: Sedentary
///   </li>
///   <li>
///     Func_FindBand: Location the bracelet
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Timezone: Set timezone
///   </li>
///   <li>
///     Func_DFU: Upgrade braceelt
///   </li>
///   <li>
///     Func_SaveStep: Save step
///   </li>
///   <li>
///     Func_TestHR: Test HR
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SyncIcon: Show icon of not in bracelet
///   </li>
///   <li>
///     Func_Camera: Remote Camera
///   </li>
///   <li>
///     Func_FindPhone: Location the Phone
///   </li>
///   <li>
///     Func_MusicControl: Music Control
///   </li>
///   <li>
///     Func_Unit: Unit Set
///   </li>
///   <li>
///     Func_AntiLost: Anti Lost
///   </li>
///   <li>
///     Func_HRMonitor: HR Monitor On/Off
///   </li>
///   <li>
///     Func_MusicStatu: Music Statu
///   </li>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
///   <li>
///     Func_SportMode: Sport Mode
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
///   <li>
///     Func_NoSleep: No Sleep On/Off
///   </li>
///   <li>
///     Func_SetRHR: Set Rest Max HR
///   </li>
///   <li>
///     Func_SetDHR: Set Dynamic Max HR
///   </li>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
///   <li>
///     Func_BloodPressure: Check blood pressure
///   </li>
///   <li>
///     Func_Ancs: use with Func_Notification, first send ancs and then send notification setting
///   </li>
///   <li>
///     Func_SportInfo: Set Sport info
///   </li>
///   <li>
///     Func_Motor: Set Motor Vibration type
///   </li>
///   <li>
///     Func_Reset: Clean all data
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEFuncType) {
  DSBLEFuncTypeAlarm = 0,
  DSBLEFuncTypeTarget = 1,
  DSBLEFuncTypeNotification = 2,
  DSBLEFuncTypeVersion = 3,
  DSBLEFuncTypeReboot = 4,
  DSBLEFuncTypeBind = 5,
  DSBLEFuncTypeUserInfo = 6,
  DSBLEFuncTypeBattery = 7,
  DSBLEFuncTypeAutoStep = 8,
  DSBLEFuncTypeLanguage = 9,
  DSBLEFuncTypeWristingTime = 10,
  DSBLEFuncTypeSedentary = 11,
  DSBLEFuncTypeFindBand = 12,
  DSBLEFuncTypeActive = 13,
  DSBLEFuncTypeTime = 14,
  DSBLEFuncTypeTimezone = 15,
  DSBLEFuncTypeDfu = 16,
  DSBLEFuncTypeSaveStep = 17,
  DSBLEFuncTypeTestHR = 18,
  DSBLEFuncTypeSync = 19,
  DSBLEFuncTypeSyncIcon = 20,
  DSBLEFuncTypeCamera = 21,
  DSBLEFuncTypeFindPhone = 22,
  DSBLEFuncTypeMusicControl = 23,
  DSBLEFuncTypeUnit = 24,
  DSBLEFuncTypeAntiLost = 25,
  DSBLEFuncTypeHrMonitor = 26,
  DSBLEFuncTypeMusicStatu = 27,
  DSBLEFuncTypeHourSystem = 28,
  DSBLEFuncTypeSportMode = 29,
  DSBLEFuncTypeSetPace = 30,
  DSBLEFuncTypeNoSleep = 31,
  DSBLEFuncTypeSetRHR = 32,
  DSBLEFuncTypeSetDHR = 33,
  DSBLEFuncTypeGsensor = 34,
  DSBLEFuncTypeBloodPressure = 35,
  DSBLEFuncTypeAncs = 36,
  DSBLEFuncTypeSportInfo = 37,
  DSBLEFuncTypeMotor = 38,
  DSBLEFuncTypeReset = 39,
};


/// 心率数据
/// heart rate class
SWIFT_CLASS("_TtC17DesayBluetoothAPI14DSBLEHeartrate")
@interface DSBLEHeartrate : NSObject
/// Time for heart rate
@property (nonatomic, copy) NSString * _Nonnull time;
/// heart rate
@property (nonatomic) NSUInteger rate;
/// Type for HR
@property (nonatomic) NSUInteger type;
/// Time for heart rate -UTC
@property (nonatomic, copy) NSDate * _Nonnull utcTime;
/// heart oxygen value
@property (nonatomic) NSUInteger ho;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Bracelet Support Language
/// <ul>
///   <li>
///     EN:  English
///   </li>
///   <li>
///     CHS: Chinese
///   </li>
///   <li>
///     FR:  French
///   </li>
///   <li>
///     IT:  Italian
///   </li>
///   <li>
///     ES:  Spanish
///   </li>
///   <li>
///     TR:  Turkish
///   </li>
///   <li>
///     PL:  Polish
///   </li>
///   <li>
///     JP:  Japanese
///   </li>
///   <li>
///     HU:  Hungarian
///   </li>
///   <li>
///     DS:  German
///   </li>
///   <li>
///     RU:  Russian
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLELanguageType) {
  DSBLELanguageTypeEN = 0,
  DSBLELanguageTypeCHS = 1,
  DSBLELanguageTypeFR = 2,
  DSBLELanguageTypeIT = 3,
  DSBLELanguageTypeES = 4,
  DSBLELanguageTypeTR = 5,
  DSBLELanguageTypePL = 6,
  DSBLELanguageTypeJP = 7,
  DSBLELanguageTypeHU = 8,
  DSBLELanguageTypeDS = 9,
  DSBLELanguageTypeRU = 10,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEProtocolType) {
  DSBLEProtocolTypeBandStandardB103 = 0,
  DSBLEProtocolTypeBandStandardB521 = 1,
  DSBLEProtocolTypeBandLenove = 2,
  DSBLEProtocolTypeBandMeizu = 3,
  DSBLEProtocolTypeBandD8 = 4,
  DSBLEProtocolTypeBandD6 = 5,
  DSBLEProtocolTypeBandD6A = 6,
  DSBLEProtocolTypeOther = 99,
};


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP17DesayBluetoothAPI24DSBLEScanConnectDelegate_")
@protocol DSBLEScanConnectDelegate
@optional
/// 蓝牙状态改变反馈
/// \param state 状态
///
- (void)notifyState:(enum BLEManagerState)state;
/// 扫描发现设备
/// \param device 设备
///
- (void)didDiscoverDevice:(BLEScanDevice * _Nonnull)device;
/// 准备连接DFU设备
/// \param device DFU设备
///
- (void)connectDFUDevice:(BLEScanDevice * _Nonnull)device;
/// 连接设备
/// \param device 设备
///
- (void)didConnectDevice:(BLEPeripheral * _Nonnull)device;
/// 断开设备
/// \param device 设备
///
/// \param error 错误
///
- (void)didDisconnectDevice:(BLEPeripheral * _Nonnull)device :(NSError * _Nullable)error;
@end


/// 久坐数据
/// sedentary reminder class
SWIFT_CLASS("_TtC17DesayBluetoothAPI14DSBLESedentary")
@interface DSBLESedentary : NSObject
/// Sedentary time.
/// During this time,bracelet will calculate the steps,if not reach the min steps,bracelet will notify user.
/// 30=30 Min
/// 60=60 Min
/// 75=75 Min
/// 90=90 Min
@property (nonatomic) NSUInteger sedentaryTime;
/// Yes for Sedentary reminder ON
/// No for Sedentary reminde OFF
@property (nonatomic) BOOL swtich;
/// Date time for bracelet start check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Date time for bracelet stop check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepValueType : NSUInteger;
enum DSBLESleepBlockType : NSUInteger;

/// 睡眠原始数据块
/// Original sleep info
SWIFT_CLASS("_TtC17DesayBluetoothAPI15DSBLESleepBlock")
@interface DSBLESleepBlock : NSObject
/// Time for sleep state.
@property (nonatomic, copy) NSDate * _Nonnull sDate;
/// Time for sleep state (String)
@property (nonatomic, copy) NSString * _Nonnull sTime;
/// sleep state
@property (nonatomic) enum DSBLESleepValueType value;
/// block type
@property (nonatomic) enum DSBLESleepBlockType type;
/// sDate timeinterval from 2010.1.1 00:00
@property (nonatomic) uint32_t timeInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep block type
/// <ul>
///   <li>
///     start: Begin
///   </li>
///   <li>
///     entry: Entry sleep
///   </li>
///   <li>
///     deep:  Sleeping
///   </li>
///   <li>
///     end:   End
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepBlockType) {
  DSBLESleepBlockTypeStart = 0,
  DSBLESleepBlockTypeEntry = 1,
  DSBLESleepBlockTypeDeep = 2,
  DSBLESleepBlockTypeEnd = 3,
};

@class DSBLESleepState;

/// Sleep result model
SWIFT_CLASS("_TtC17DesayBluetoothAPI14DSBLESleepInfo")
@interface DSBLESleepInfo : NSObject
/// Begin Time for sleep
@property (nonatomic, copy) NSString * _Nonnull beginTime;
/// End time for sleep
@property (nonatomic, copy) NSString * _Nonnull endTime;
/// total duration between sleep and awake
@property (nonatomic) NSUInteger totalDuration;
/// slee state array
@property (nonatomic, copy) NSArray<DSBLESleepState *> * _Nonnull sleepStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepType : NSUInteger;

/// Sleep state info
SWIFT_CLASS("_TtC17DesayBluetoothAPI15DSBLESleepState")
@interface DSBLESleepState : NSObject
@property (nonatomic, copy) NSString * _Nonnull beginTime;
@property (nonatomic, copy) NSString * _Nonnull endTime;
@property (nonatomic) enum DSBLESleepType state;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep state for app
/// <ul>
///   <li>
///     awake: Wake up
///   </li>
///   <li>
///     light: Light Sleep
///   </li>
///   <li>
///     deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepType) {
  DSBLESleepTypeAwake = 0,
  DSBLESleepTypeLight = 2,
  DSBLESleepTypeDeep = 3,
};

/// sleep state for Algorithm
/// <ul>
///   <li>
///     none: None
///   </li>
///   <li>
///     wake: Wake up
///   </li>
///   <li>
///     walk: Wake And Walk
///   </li>
///   <li>
///     run: Wake And Run
///   </li>
///   <li>
///     light: Light Sleep
///   </li>
///   <li>
///     deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepValueType) {
  DSBLESleepValueTypeNone = 0,
  DSBLESleepValueTypeWake = 1,
  DSBLESleepValueTypeWalk = 2,
  DSBLESleepValueTypeRun = 3,
  DSBLESleepValueTypeLight = 11,
  DSBLESleepValueTypeDeep = 12,
};


/// Sport info (sync to bracelet) for sport mode (Only for MZ,DS-D9)
SWIFT_CLASS("_TtC17DesayBluetoothAPI14DSBLESportInfo")
@interface DSBLESportInfo : NSObject
/// Set time,Unit(s) when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
/// Set distance,Unit(m)
@property (nonatomic) NSUInteger distance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESportState : NSUInteger;
enum DSBLESportType : NSUInteger;

/// Sport set class for sport mode
SWIFT_CLASS("_TtC17DesayBluetoothAPI13DSBLESportSet")
@interface DSBLESportSet : NSObject
/// Set sport state,control bracelet to start or stop sport Mode. (All bracelet except B103)
@property (nonatomic) enum DSBLESportState state;
/// Set sport type. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) enum DSBLESportType type;
/// Set time,Unit(s)  when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Sport state
/// <ul>
///   <li>
///     stop   default
///   </li>
///   <li>
///     start
///   </li>
///   <li>
///     pause
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESportState) {
  DSBLESportStateStop = 0,
  DSBLESportStateStart = 1,
  DSBLESportStatePause = 2,
};

/// Sport type
/// <ul>
///   <li>
///     run
///   </li>
///   <li>
///     cycling
///   </li>
///   <li>
///     Strength
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESportType) {
  DSBLESportTypeRun = 0,
  DSBLESportTypeCycling = 1,
  DSBLESportTypeStrength = 2,
};

enum DSBLEStepType : NSUInteger;

/// 运动数据
/// step info class
SWIFT_CLASS("_TtC17DesayBluetoothAPI13DSBLEStepInfo")
@interface DSBLEStepInfo : NSObject
/// Time for step, UTC(String)
@property (nonatomic, copy) NSString * _Nonnull time;
/// Time for step, UTC(Date)
@property (nonatomic, copy) NSDate * _Nonnull timeUTC;
/// state=1 // sit
/// state=2 // walk
/// state=3 // walk quickly /run
@property (nonatomic) enum DSBLEStepType state;
/// Step
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// step type
/// <ul>
///   <li>
///     other: Sit/Static
///   </li>
///   <li>
///     walk:  walk
///   </li>
///   <li>
///     run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEStepType) {
  DSBLEStepTypeOther = 0,
  DSBLEStepTypeWalk = 1,
  DSBLEStepTypeRun = 2,
};


/// 同步过程
SWIFT_PROTOCOL("_TtP17DesayBluetoothAPI17DSBLESyncDelegate_")
@protocol DSBLESyncDelegate
/// 同步数据 进度
/// progress of data synchronization
/// \param progress progress 进度值(0.0-1.0) progress value
///
///
/// returns:
/// progress
- (void)syncProgressWithProgress:(float)progress;
/// 即将开始同步
/// Sync is about to begin
- (void)syncWillStart;
/// 同步即将结束
/// Syncing is coming to an end
- (void)syncWillEnd;
/// 同步出错
/// An error occurred attempting to synchronize
- (void)syncError;
/// synchronized data(同步后的数据)
/// \param syncData syncData- Dictionary
/// Key for Data
/// BLEDefine.stepDataKey -> step
/// BLEDefine.sleepDataKey -> sleep
/// BLEDefine.hrDataKey -> HR / HR & Oxygen
/// BLEDefine.pressureDataKey -> HR Pressure
///
- (void)syncFinishedWithSyncResultData:(NSDictionary<NSString *, NSArray *> * _Nonnull)syncData;
@end

/// Unit System
/// <ul>
///   <li>
///     MS: Metric system
///   </li>
///   <li>
///     BS: British system
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEUnitType) {
  DSBLEUnitTypeBS = 0,
  DSBLEUnitTypeMS = 1,
};

enum DSBLEVibrationType : NSUInteger;

/// Set Vibration pramas (Only for DS-D8,DS-D9,DS-D6,HW01)
SWIFT_CLASS("_TtC17DesayBluetoothAPI17DSBLEVibrationSet")
@interface DSBLEVibrationSet : NSObject
/// Vibration type
@property (nonatomic) enum DSBLEVibrationType type;
/// true for open motor vibration, false for close motor vibration
@property (nonatomic) BOOL on;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Motor vibration strength
typedef SWIFT_ENUM(NSUInteger, DSBLEVibrationType) {
  DSBLEVibrationTypeLow = 1,
  DSBLEVibrationTypeMiddle = 2,
  DSBLEVibrationTypeHigh = 3,
};

enum DSBLEWristingType : NSUInteger;

/// Wristing Time setting Model
SWIFT_CLASS("_TtC17DesayBluetoothAPI17DSBLEWristingTime")
@interface DSBLEWristingTime : NSObject
@property (nonatomic) enum DSBLEWristingType wristingType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Wristing Time extend setting Model (Not include: B521 B103 B502)
/// Add startTime and endTime.
SWIFT_CLASS("_TtC17DesayBluetoothAPI23DSBLEWristingTimeExtend")
@interface DSBLEWristingTimeExtend : DSBLEWristingTime
/// start time. eg.  8:00 ~ 19:00, you must send 0800.
@property (nonatomic, copy) NSString * _Nonnull startTime;
/// end  time.  eg.  8:00 ~ 19:00, you must send 1900.
@property (nonatomic, copy) NSString * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Wristing time type
/// wearHabit Which hand to wear
/// <ul>
///   <li>
///     off: 0
///   </li>
///   <li>
///     auto: 1 not all bracelet support this type
///   </li>
///   <li>
///     left: 2
///   </li>
///   <li>
///     right: 3
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEWristingType) {
  DSBLEWristingTypeOff = 0,
  DSBLEWristingTypeAuto = 1,
  DSBLEWristingTypeLeft = 2,
  DSBLEWristingTypeRight = 3,
};


SWIFT_CLASS("_TtC17DesayBluetoothAPI18ScanConnectHandler")
@interface ScanConnectHandler : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface ScanConnectHandler (SWIFT_EXTENSION(DesayBluetoothAPI))
- (void)addDelegate:(id <DSBLEScanConnectDelegate> _Nullable)delegate;
- (void)removeDelegate:(id <DSBLEScanConnectDelegate> _Nullable)delegate;
@end


@interface ScanConnectHandler (SWIFT_EXTENSION(DesayBluetoothAPI))
- (void)scan;
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options;
- (void)stopScan;
@end


@interface ScanConnectHandler (SWIFT_EXTENSION(DesayBluetoothAPI)) <BLEManagerDelegate>
- (void)didUpdateState:(enum BLEManagerState)state;
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
@end


@interface ScanConnectHandler (SWIFT_EXTENSION(DesayBluetoothAPI))
/// Mac连接
/// \param mac 连接
///
- (void)connectWithMac:(NSString * _Nullable)mac;
/// identifier 连接
/// \param identifier identifier
///
- (void)connectWithIdentifier:(NSString * _Nullable)identifier;
/// 连接扫描设备
/// \param scanDevice 扫描出来的设备
///
- (void)connectWithScanDevice:(BLEScanDevice * _Nonnull)scanDevice;
/// 断开连接
- (void)disconnectDevice:(BLEPeripheral * _Nonnull)device;
/// 通过identifier断开连接
/// \param identifier identifier
///
- (void)disconnectDeviceWithIdentifier:(NSString * _Nonnull)identifier;
@end

#pragma clang diagnostic pop
