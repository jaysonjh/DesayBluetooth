#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef DESAYBLUETOOTH_SWIFT_H
#define DESAYBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DesayBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, APIState, closed) {
  APIStateNormal = 0,
  APIStateDfu = 1,
};

@class NSString;
@class NSNumber;
@protocol DSBLEScanConnectDelegate;

SWIFT_CLASS("_TtC14DesayBluetooth13BLEAPIManager")
@interface BLEAPIManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEAPIManager * _Nonnull shared;)
+ (BLEAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Restore Key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable restoreKey;)
+ (NSString * _Nullable)restoreKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setRestoreKey:(NSString * _Nullable)value;
/// mode
@property (nonatomic) BOOL debug;
- (void)setLogOnWithCode:(NSString * _Nonnull)code;
/// log callback
@property (nonatomic, copy) void (^ _Nullable logOut)(NSString * _Nonnull);
@property (nonatomic, strong) id <DSBLEScanConnectDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DSBLEDFUDelegate;
@class DSBLEDFUSet;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// API State
@property (nonatomic, readonly) enum APIState apiState;
/// DFU delegate
@property (nonatomic, strong) id <DSBLEDFUDelegate> _Nullable dfuDelegate;
/// handle DFU
/// \param model DSBLEDFUSet
///
- (void)handleDFUWith:(DSBLEDFUSet * _Nonnull)model;
@end

@class CBUUID;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)scan;
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options filterNames:(NSSet<NSString *> * _Nullable)filterNames;
/// stop scan
- (void)stopScan;
/// is Scanning
@property (nonatomic, readonly) BOOL isScaning;
@end

enum BLEManagerState : NSUInteger;
@class BLEPeripheral;
@class CBCharacteristic;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)didUpdateState:(enum BLEManagerState)state;
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// SDK Version
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// BLE State
@property (nonatomic, readonly) enum BLEManagerState bleState;
/// authorization of bluetooth , new in iOS13.
@property (nonatomic, readonly) CBManagerAuthorization authorization SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class Device;
@class DSBLEDevice;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// connect by mac address
/// \param mac mac len = 12 17
///
- (void)connectWithMac:(NSString * _Nullable)mac;
/// connect by identifier
/// \param identifier identifier
///
- (void)connectWithIdentifier:(NSString * _Nullable)identifier;
/// connect by peripheral （last）
/// \param peripheral peripheral
///
- (void)connectPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// disconnected device
/// \param identifier identifier of device
///
- (void)disconnectWithIdentifier:(NSString * _Nullable)identifier;
/// disconnected device
/// \param device BLEPeripheral obj
///
- (void)disconnectPeripheral:(BLEPeripheral * _Nullable)peripheral;
/// disconnected device
/// \param device device obj
///
- (void)disconnectDevice:(Device * _Nullable)device;
/// Connected device list
///
/// returns:
/// Array of DSBLEDevice
- (NSArray<DSBLEDevice *> * _Nonnull)pairedDevice SWIFT_WARN_UNUSED_RESULT;
@end

@class Band;
@class Shoe;
@class Scales;
@class Tracker;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// get all conect device
- (NSDictionary<NSString *, Device *> * _Nonnull)allDevice SWIFT_WARN_UNUSED_RESULT;
/// Find a band device by identifier
/// \param identifier device uuid
///
- (Band * _Nullable)isBandBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a shoe device by identifier
/// \param identifier device uuid
///
- (Shoe * _Nullable)isShoeBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a scales device by identifier
/// \param identifier device uuid
///
- (Scales * _Nullable)isScalesBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a Tracker device by identifier
/// \param identifier device uuid
///
- (Tracker * _Nullable)isTrackerBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14DesayBluetooth9BLEDefine")
@interface BLEDefine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultOK;)
+ (NSString * _Nonnull)resultOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultERR;)
+ (NSString * _Nonnull)resultERR SWIFT_WARN_UNUSED_RESULT;
/// MAC 地址长度 12
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger macLen;)
+ (NSInteger)macLen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, BLEManagerState, closed) {
  BLEManagerStateOff = 0,
  BLEManagerStateOn = 1,
};

@class CBPeripheral;
@class CBService;

/// Device Model
SWIFT_CLASS("_TtC14DesayBluetooth13BLEPeripheral")
@interface BLEPeripheral : NSObject
/// CBPeripheral
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull cbPeripheral;
/// identifier of device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// services
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nonnull services;
/// characteristics
@property (nonatomic, readonly, copy) NSArray<CBCharacteristic *> * _Nonnull characteristics;
/// RSSI  Only have value in scan result
@property (nonatomic, readonly, strong) NSNumber * _Nullable rssi;
/// advertisement Only have value in scan result
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable advertisementData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DSBLESleepBlock;
@class DSBLESleepInfo;

SWIFT_CLASS("_TtC14DesayBluetooth17BLESleepAlgorithm")
@interface BLESleepAlgorithm : NSObject
/// 分析睡眠数据
/// analyze sleep data
/// @param rawData 睡眠原始数据
/// @return 睡眠状态 NSArray<WMSleepInfo *>
- (NSArray<DSBLESleepInfo *> * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData deviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEDeviceType : NSUInteger;
enum DSBLEProtocolType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth7BLEUtil")
@interface BLEUtil : NSObject
/// 标准mac
/// \param mac 不含:的mac
///
///
/// returns:
/// 标准mac
+ (NSString * _Nullable)standardMacBy:(NSString * _Nullable)mac SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备大类型
/// \param name 设备名
///
///
/// returns:
/// 总类型
+ (enum DSBLEDeviceType)deviceTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备协议类型
/// \param name 设备名
///
///
/// returns:
/// 设备协议类型
+ (enum DSBLEProtocolType)protocolTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据厂商代码获取设备名字
/// \param manuCode 厂商代码
///
///
/// returns:
/// 设备名字
+ (NSString * _Nonnull)deviceNameBy:(NSString * _Nonnull)manuCode SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名字获取厂商代码
/// \param name 设备名字
///
///
/// returns:
/// 厂商代码
+ (NSString * _Nonnull)manuCodeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param name 设备名字
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param identifier identifier
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface BLEUtil (SWIFT_EXTENSION(DesayBluetooth))
/// 卡路里计算公式
/// \param weight 重量 千克
///
/// \param distance 距离 米
///
///
/// returns:
/// 小卡
+ (float)calculatorCalorieWithWeight:(float)weight distance:(float)distance SWIFT_WARN_UNUSED_RESULT;
/// 距离计算公式
/// \param height 高度 cm
///
/// \param step 步数
///
///
/// returns:
/// 米
+ (float)calculatorDistanceWithHeight:(float)height step:(NSInteger)step SWIFT_WARN_UNUSED_RESULT;
/// 步数通过结束时间算开始时间
/// \param endTime 结束时间
///
///
/// returns:
/// 开始时间
+ (NSDate * _Nonnull)stepStartTimeBy:(NSDate * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14DesayBluetooth6Device")
@interface Device : NSObject
@property (nonatomic, readonly) BOOL isReady;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum DSBLEAutoType : NSUInteger;
@protocol DSBLEBindDelegate;
@protocol DSBLESyncDelegate;
enum DSBLEBandFuncType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth4Band")
@interface Band : Device
/// notify data callback
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// bind delegate
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// sync delegate
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEBandFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


/// 2.0协议的手环
SWIFT_CLASS("_TtC14DesayBluetooth8BandByte")
@interface BandByte : Band
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end




SWIFT_CLASS("_TtC14DesayBluetooth7BandStr")
@interface BandStr : Band
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end



/// alarm class
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLEAlarm")
@interface DSBLEAlarm : NSObject
/// Alarm No. Default = 0
@property (nonatomic) NSUInteger alarmNO;
/// Main switch 主开关
@property (nonatomic) BOOL switchStatus;
/// Eg Time: 0800
@property (nonatomic, copy) NSString * _Nonnull alarmTime;
/// Monday switch 周一开关
@property (nonatomic) BOOL mondaySwitch;
/// Tuesday switch 周二开关
@property (nonatomic) BOOL tuesdaySwitch;
/// Wednesday swtich 周三开关
@property (nonatomic) BOOL wednesdaySwitch;
/// Thursday switch 周四开关
@property (nonatomic) BOOL thursdaySwitch;
/// Friday switch 周五开关
@property (nonatomic) BOOL fridaySwitch;
/// Saturday switch 周六开关
@property (nonatomic) BOOL saturdaySwitch;
/// Sunday switch 周日开关
@property (nonatomic) BOOL sundaySwitch;
/// Date for Time
@property (nonatomic, copy) NSDate * _Nullable alarmDate;
+ (DSBLEAlarm * _Nullable)alarmWithFormat:(NSString * _Nonnull)format index:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Alert Distance Setting
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEAlertDistance")
@interface DSBLEAlertDistance : NSObject
/// near range
@property (nonatomic) NSUInteger nearRange;
/// far range
@property (nonatomic) NSUInteger farRange;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Alert distance type
/// <ul>
///   <li>
///     near: Near mode
///   </li>
///   <li>
///     far: Far mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAlertType, closed) {
  DSBLEAlertTypeNear = 0,
  DSBLEAlertTypeMedium = 1,
  DSBLEAlertTypeFar = 2,
};


/// ANCS提示设置类.
/// ANCS Setting class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEAppNotify")
@interface DSBLEAppNotify : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyPhoneCall;)
+ (NSString * _Nonnull)kDSBLEAppNotifyPhoneCall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyMessage;)
+ (NSString * _Nonnull)kDSBLEAppNotifyMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWechat;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWechat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyQQ;)
+ (NSString * _Nonnull)kDSBLEAppNotifyQQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyFacebook;)
+ (NSString * _Nonnull)kDSBLEAppNotifyFacebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyTwitter;)
+ (NSString * _Nonnull)kDSBLEAppNotifyTwitter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyEmail;)
+ (NSString * _Nonnull)kDSBLEAppNotifyEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWhatsApp;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWhatsApp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyInstagram;)
+ (NSString * _Nonnull)kDSBLEAppNotifyInstagram SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyLine;)
+ (NSString * _Nonnull)kDSBLEAppNotifyLine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifySkype;)
+ (NSString * _Nonnull)kDSBLEAppNotifySkype SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWeibo;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWeibo SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyHike;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyHike SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyFBMessenger;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyFBMessenger SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGmail;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGmail SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleHangout;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleHangout SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifySnapchat;)
+ (NSString * _Nonnull)kDSBLEAPPNotifySnapchat SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleCalendar;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleCalendar SWIFT_WARN_UNUSED_RESULT;
/// create new App Notify
/// \param dict Dictionary include All reminder setting
///
///
/// returns:
/// DSBLEAppNotify instance
+ (DSBLEAppNotify * _Nullable)appNotifyWithDict:(NSDictionary<NSString *, NSNumber *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNotifyWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getAppNoifiyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)allNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)appNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Bracelet Notify
/// <ul>
///   <li>
///     Auto_CheckHR: Check HR result
///   </li>
///   <li>
///     Auto_SportHR: Real time sport HR
///   </li>
///   <li>
///     Auto_Step: Real time step
///   </li>
///   <li>
///     Auto_FindPhone: Location phone
///   </li>
///   <li>
///     Auto_MusicControl: Musci Control
///   </li>
///   <li>
///     Auto_NoSleep: No sleep
///   </li>
///   <li>
///     Auto_BloodPressure: Blood Pressure
///   </li>
///   <li>
///     Auto_oxygen: HR Oxygen
///   </li>
///   <li>
///     Auto_camera
///   </li>
///   <li>
///     Auto_calorie
///   </li>
///   <li>
///     Auto_pai
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAutoType, closed) {
  DSBLEAutoTypeOther = 0,
  DSBLEAutoTypeCheckHR = 1,
  DSBLEAutoTypeSportHR = 2,
  DSBLEAutoTypeStep = 3,
  DSBLEAutoTypeFindPhone = 4,
  DSBLEAutoTypeMusicControl = 5,
  DSBLEAutoTypeNoSleep = 6,
  DSBLEAutoTypeBloodPressure = 7,
  DSBLEAutoTypeOxygen = 8,
  DSBLEAutoTypeCamera = 9,
  DSBLEAutoTypeCalorie = 10,
  DSBLEAutoTypePai = 11,
  DSBLEAutoTypeSos = 12,
  DSBLEAutoTypeBindResult = 13,
};

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Alarm: Alarm
///   </li>
///   <li>
///     Func_Target: daily step target
///   </li>
///   <li>
///     Func_Notification: Notification reminder
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Reboot: Reboot bracelet
///   </li>
///   <li>
///     Func_Bind: Bind braceelt
///   </li>
///   <li>
///     Func_UserInfo: User Info（height,Weight）
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Language: Language Setting
///   </li>
///   <li>
///     Func_WristingTime: Wear habit and Writing time
///   </li>
///   <li>
///     Func_Sedentary: Sedentary
///   </li>
///   <li>
///     Func_FindBand: Location the bracelet
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Timezone: Set timezone
///   </li>
///   <li>
///     Func_DFU: Upgrade braceelt
///   </li>
///   <li>
///     Func_SaveStep: Save step
///   </li>
///   <li>
///     Func_TestHR: Test HR
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SyncIcon: Show icon of not in bracelet
///   </li>
///   <li>
///     Func_Camera: Remote Camera
///   </li>
///   <li>
///     Func_FindPhone: Location the Phone
///   </li>
///   <li>
///     Func_MusicControl: Music Control
///   </li>
///   <li>
///     Func_Unit: Unit Set
///   </li>
///   <li>
///     Func_AntiLost: Anti Lost
///   </li>
///   <li>
///     Func_HRMonitor: HR Monitor On/Off
///   </li>
///   <li>
///     Func_MusicStatu: Music Statu
///   </li>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
///   <li>
///     Func_SportMode: Sport Mode
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
///   <li>
///     Func_NoSleep: No Sleep On/Off
///   </li>
///   <li>
///     Func_SetRHR: Set Rest Max HR
///   </li>
///   <li>
///     Func_SetDHR: Set Dynamic Max HR
///   </li>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
///   <li>
///     Func_BloodPressure: Check blood pressure
///   </li>
///   <li>
///     Func_Ancs: use with Func_Notification, first send ancs and then send notification setting
///   </li>
///   <li>
///     Func_SportInfo: Set Sport info
///   </li>
///   <li>
///     Func_Motor: Set Motor Vibration type
///   </li>
///   <li>
///     Func_Reset: Clean all data
///   </li>
///   <li>
///     Func_Display: Srceen Display
///   </li>
///   <li>
///     Func_PAI: Set PAI on/off
///   </li>
///   <li>
///     Func_PAILimits: Search PAI limits
///   </li>
///   <li>
///     Func_PAIHR: Set PAI static and dynamic HR
///   </li>
///   <li>
///     Func_Gender
///   </li>
///   <li>
///     Func_PAITotal: Get PAI Total
///   </li>
///   <li>
///     Func_AntiStatus: Bond to auti-lost status
///   </li>
///   <li>
///     Func_AlertDistance: Distance Alert for Band
///   </li>
///   <li>
///     Func_StepGoal: Goal achievement
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEBandFuncType, closed) {
  DSBLEBandFuncTypeNone = 0,
  DSBLEBandFuncTypeCommon = 1,
  DSBLEBandFuncTypeAlarm = 2,
  DSBLEBandFuncTypeTarget = 3,
  DSBLEBandFuncTypeNotification = 4,
  DSBLEBandFuncTypeVersion = 5,
  DSBLEBandFuncTypeReboot = 6,
  DSBLEBandFuncTypeBind = 7,
  DSBLEBandFuncTypeUserInfo = 8,
  DSBLEBandFuncTypeBattery = 9,
  DSBLEBandFuncTypeAutoStep = 10,
  DSBLEBandFuncTypeLanguage = 11,
  DSBLEBandFuncTypeWristingTime = 12,
  DSBLEBandFuncTypeSedentary = 13,
  DSBLEBandFuncTypeFindBand = 14,
  DSBLEBandFuncTypeActive = 15,
  DSBLEBandFuncTypeTime = 16,
  DSBLEBandFuncTypeTimezone = 17,
  DSBLEBandFuncTypeDfu = 18,
  DSBLEBandFuncTypeSaveStep = 19,
  DSBLEBandFuncTypeTestHR = 20,
  DSBLEBandFuncTypeSync = 21,
  DSBLEBandFuncTypeSyncIcon = 22,
  DSBLEBandFuncTypeCamera = 23,
  DSBLEBandFuncTypeFindPhone = 24,
  DSBLEBandFuncTypeMusicControl = 25,
  DSBLEBandFuncTypeUnit = 26,
  DSBLEBandFuncTypeAntiLost = 27,
  DSBLEBandFuncTypeHrMonitor = 28,
  DSBLEBandFuncTypeMusicStatu = 29,
  DSBLEBandFuncTypeHourSystem = 30,
  DSBLEBandFuncTypeSportMode = 31,
  DSBLEBandFuncTypeSetPace = 32,
  DSBLEBandFuncTypeNoSleep = 33,
  DSBLEBandFuncTypeSetRHR = 34,
  DSBLEBandFuncTypeSetDHR = 35,
  DSBLEBandFuncTypeGsensor = 36,
  DSBLEBandFuncTypeBloodPressure = 37,
  DSBLEBandFuncTypeAncs = 38,
  DSBLEBandFuncTypeSportInfo = 39,
  DSBLEBandFuncTypeMotor = 40,
  DSBLEBandFuncTypeReset = 41,
  DSBLEBandFuncTypeDisplay = 42,
  DSBLEBandFuncTypePai = 43,
  DSBLEBandFuncTypePaiLimits = 44,
  DSBLEBandFuncTypePaiHR = 45,
  DSBLEBandFuncTypeGender = 46,
  DSBLEBandFuncTypePaiTotal = 47,
  DSBLEBandFuncTypeClearData = 48,
  DSBLEBandFuncTypeSn = 49,
  DSBLEBandFuncTypeTestBP = 50,
  DSBLEBandFuncTypeConnect = 51,
  DSBLEBandFuncTypeAntiStatus = 52,
  DSBLEBandFuncTypeAlertDistance = 53,
  DSBLEBandFuncTypeAlertType = 54,
  DSBLEBandFuncTypeRestMode = 55,
  DSBLEBandFuncTypeWeather = 56,
  DSBLEBandFuncTypeCalorie = 57,
  DSBLEBandFuncTypeDistance = 58,
  DSBLEBandFuncTypeDrink = 59,
  DSBLEBandFuncTypeDial = 60,
  DSBLEBandFuncTypeAge = 61,
  DSBLEBandFuncTypeBright = 62,
  DSBLEBandFuncTypeStepGoal = 63,
  DSBLEBandFuncTypeClimate = 64,
  DSBLEBandFuncTypeTextDisplay = 65,
  DSBLEBandFuncTypeMac = 66,
};

enum DSBLEBindingState : NSUInteger;

/// 绑定 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLEBindDelegate_")
@protocol DSBLEBindDelegate
/// 处理绑定状态
/// \param state 绑定状态
///
- (void)handleBindState:(enum DSBLEBindingState)state device:(BLEPeripheral * _Nullable)device;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEBindingState, closed) {
  DSBLEBindingStateIdel = 0,
  DSBLEBindingStateBond = 1,
  DSBLEBindingStateActive = 2,
  DSBLEBindingStateSuccess = 3,
  DSBLEBindingStateFail = 4,
};


/// Blood Pressure class
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEBloodPressure")
@interface DSBLEBloodPressure : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 心肌收縮（systole） 高压
@property (nonatomic) NSUInteger systole;
/// 心肌舒張（diastole） 低压
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Set Blood Pressure pramas (Only for DS-D8)
SWIFT_CLASS("_TtC14DesayBluetooth21DSBLEBloodPressureSet")
@interface DSBLEBloodPressureSet : NSObject
/// true for begin blood pressure, false for stop blood pressure
@property (nonatomic) BOOL on;
/// systole for proof test value
@property (nonatomic) NSUInteger systole;
/// diastole for proof test value
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Device display bright type
typedef SWIFT_ENUM(NSUInteger, DSBLEBrightType, closed) {
  DSBLEBrightTypeLow = 0,
  DSBLEBrightTypeMedium = 1,
  DSBLEBrightTypeHigh = 2,
};

enum DSBLEWeatherState : NSUInteger;
enum DSBLETemperatureType : NSUInteger;

/// Climate,send temperature and weather state
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEClimate")
@interface DSBLEClimate : NSObject
@property (nonatomic) enum DSBLEWeatherState weatherState;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// DFU 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth16DSBLEDFUDelegate_")
@protocol DSBLEDFUDelegate
/// DFU进度
/// \param progress 进度
///
- (void)DFUProgress:(float)progress device:(BLEPeripheral * _Nullable)device;
/// DFU开始
- (void)DFUStartWithDevice:(BLEPeripheral * _Nullable)device;
/// DFU结束，成功
- (void)DFUEndWithDevice:(BLEPeripheral * _Nullable)device;
/// DFU出错
/// \param error 出错原因
///
- (void)DFUError:(NSString * _Nonnull)error device:(BLEPeripheral * _Nullable)device;
@end

enum DSBLEOTAFileType : uint8_t;

/// Set DFU
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDFUSet")
@interface DSBLEDFUSet : NSObject
/// device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// device MAC 12 count
@property (nonatomic, copy) NSString * _Nonnull deviceMac;
/// file path
@property (nonatomic, copy) NSString * _Nonnull filePath;
/// file type, Only for BLE Protocol 2.X Devices
@property (nonatomic) enum DSBLEOTAFileType fileType;
/// device identifier
@property (nonatomic, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSBLEScalesData;

SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDevice")
@interface DSBLEDevice : BLEPeripheral
/// type
@property (nonatomic, readonly) enum DSBLEDeviceType type;
@property (nonatomic, readonly, copy) NSString * _Nullable mac;
/// MAC len = 12 + 5
@property (nonatomic, readonly, copy) NSString * _Nullable standardMac;
/// OTA? true false
@property (nonatomic, readonly) BOOL state;
/// 2组 scales data
@property (nonatomic, readonly, strong) DSBLEScalesData * _Nullable scalesData;
/// power (50 = 50%)
@property (nonatomic, readonly) NSInteger power;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEDeviceType, closed) {
  DSBLEDeviceTypeBand = 0,
  DSBLEDeviceTypeScales = 1,
  DSBLEDeviceTypeShoe = 2,
  DSBLEDeviceTypeWatch = 3,
  DSBLEDeviceTypeTracker = 4,
  DSBLEDeviceTypeOther = 5,
};

/// Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Screen Display: Portrait
///   </li>
///   <li>
///     LandscapeLeft     Screen Display: Landscape Left
///   </li>
///   <li>
///     LandscapeRight    Screen Display: Landscape Right
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEDisplayType, closed) {
  DSBLEDisplayTypePortrait = 1,
  DSBLEDisplayTypeLandscapeLeft = 2,
  DSBLEDisplayTypeLandscapeRight = 3,
};

/// Fish Cast type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishCastType, closed) {
  DSBLEFishCastTypeSPINNING = 0,
  DSBLEFishCastTypeFLYFISHING = 1,
  DSBLEFishCastTypeTROLLING = 2,
  DSBLEFishCastTypeJIGGING = 3,
  DSBLEFishCastTypeCARPMATCH = 4,
  DSBLEFishCastTypeINSHORE = 5,
  DSBLEFishCastTypePOLE = 6,
};

/// Fish Event type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishEventType, closed) {
  DSBLEFishEventTypeCAST = 0,
  DSBLEFishEventTypeCATCH = 1,
  DSBLEFishEventTypeMARKER = 2,
};


/// GPS Data
SWIFT_CLASS("_TtC14DesayBluetooth8DSBLEGPS")
@interface DSBLEGPS : NSObject
/// longitude 经度
@property (nonatomic) double longitude;
/// latitude 纬度
@property (nonatomic) double latitude;
/// Time
@property (nonatomic, copy) NSDate * _Nonnull time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Gender
/// <ul>
///   <li>
///     male: Man
///   </li>
///   <li>
///     female: Woman
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEGender, closed) {
  DSBLEGenderMale = 0,
  DSBLEGenderFemale = 1,
};


/// Gsensor coordinate
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEGsensor")
@interface DSBLEGsensor : NSObject
@property (nonatomic) NSInteger x;
@property (nonatomic) NSInteger y;
@property (nonatomic) NSInteger z;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// HRMonitor
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHRMonitor")
@interface DSBLEHRMonitor : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// Interval Time for check HR, Default 30min, only support by DS-F9.
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HeartRate Type
/// <ul>
///   <li>
///     test: test
///   </li>
///   <li>
///     monitor: monitor
///   </li>
///   <li>
///     sport: sport
///   </li>
///   <li>
///     rest: rest
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEHeartRateType, closed) {
  DSBLEHeartRateTypeTest = 0,
  DSBLEHeartRateTypeMonitor = 1,
  DSBLEHeartRateTypeSport = 3,
  DSBLEHeartRateTypeRest = 2,
};


/// heart rate and blood oxygens class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHeartrate")
@interface DSBLEHeartrate : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// heart rate value
@property (nonatomic) enum DSBLEHeartRateType type;
/// heart rate value
@property (nonatomic) NSUInteger hr;
/// blood oxygen value
@property (nonatomic) NSUInteger bo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEHourSystemType, closed) {
  DSBLEHourSystemTypeHour12 = 0,
  DSBLEHourSystemTypeHour24 = 1,
};

/// Bracelet Support Language
/// <ul>
///   <li>
///     EN:  English
///   </li>
///   <li>
///     CHS: Chinese
///   </li>
///   <li>
///     FR:  French
///   </li>
///   <li>
///     IT:  Italian
///   </li>
///   <li>
///     ES:  Spanish
///   </li>
///   <li>
///     TR:  Turkish
///   </li>
///   <li>
///     PL:  Polish
///   </li>
///   <li>
///     JP:  Japanese
///   </li>
///   <li>
///     HU:  Hungarian
///   </li>
///   <li>
///     DS:  German
///   </li>
///   <li>
///     RU:  Russian
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLELanguageType, closed) {
  DSBLELanguageTypeEN = 0,
  DSBLELanguageTypeCHS = 1,
  DSBLELanguageTypeFR = 2,
  DSBLELanguageTypeIT = 3,
  DSBLELanguageTypeES = 4,
  DSBLELanguageTypeTR = 5,
  DSBLELanguageTypePL = 6,
  DSBLELanguageTypeJP = 7,
  DSBLELanguageTypeHU = 8,
  DSBLELanguageTypeDS = 9,
  DSBLELanguageTypeRU = 10,
};


/// NoSleep feedback Only for LE
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLENoSleep")
@interface DSBLENoSleep : NSObject
/// total min
@property (nonatomic) NSUInteger total;
/// less time
@property (nonatomic) NSUInteger timeInterval;
/// when set to bracelet, feedback just return ok/err
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Device OTA file type, Only for BLE Protocol 2.0 Device
typedef SWIFT_ENUM(uint8_t, DSBLEOTAFileType, closed) {
  DSBLEOTAFileTypeFramework = 0x00,
  DSBLEOTAFileTypeAgps = 0x04,
};


/// PAI Heartrate
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEPAIHeartrate")
@interface DSBLEPAIHeartrate : NSObject
/// Static Heartrate
@property (nonatomic) NSUInteger staticHR;
/// Max Heartrate
@property (nonatomic) NSUInteger maxHR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEPAIValueType : NSUInteger;

/// PAI result info
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEPAIInfo")
@interface DSBLEPAIInfo : NSObject
/// Time for pai
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// Value type
@property (nonatomic) enum DSBLEPAIValueType type;
/// pai
@property (nonatomic) NSUInteger value;
/// pai interval
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Limits Only for LE(HW01-Pro HW02-Plus)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEPAILimits")
@interface DSBLEPAILimits : NSObject
/// low limits
@property (nonatomic) NSUInteger low;
/// medium limits
@property (nonatomic) NSUInteger medium;
/// high limits
@property (nonatomic) NSUInteger high;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Seting
/// <ul>
///   <li>
///     off: off
///   </li>
///   <li>
///     normal: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIType, closed) {
  DSBLEPAITypeOff = 0,
  DSBLEPAITypeNormal = 1,
  DSBLEPAITypeHigh = 2,
};


/// PAI value
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEPAIValue")
@interface DSBLEPAIValue : NSObject
/// total Pai
@property (nonatomic) NSUInteger totalPAI;
/// daily Pai
@property (nonatomic) NSUInteger dailyPAI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Value Type
/// <ul>
///   <li>
///     low: off
///   </li>
///   <li>
///     medium: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIValueType, closed) {
  DSBLEPAIValueTypeLow = 0,
  DSBLEPAIValueTypeMedium = 1,
  DSBLEPAIValueTypeHigh = 2,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEProtocolType, closed) {
  DSBLEProtocolTypeOther = 0,
  DSBLEProtocolTypeBand1_103 = 1,
  DSBLEProtocolTypeBand1_521 = 2,
  DSBLEProtocolTypeBand1_Z18 = 3,
  DSBLEProtocolTypeBand2 = 4,
  DSBLEProtocolTypeScalesLF = 5,
  DSBLEProtocolTypeScalesCS = 6,
  DSBLEProtocolTypeShoeDS = 7,
  DSBLEProtocolTypeTracker06 = 8,
  DSBLEProtocolTypeBand_Freq = 9,
};


/// Rest mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLERestMode")
@interface DSBLERestMode : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// startTime
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// endTime
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEScalesType : NSUInteger;

/// Scales sync data
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEScalesData")
@interface DSBLEScalesData : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// type
@property (nonatomic) enum DSBLEScalesType type;
/// weight (g)
@property (nonatomic) float weight;
/// impedance
@property (nonatomic) NSUInteger impedance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_WUnit: Weight Unit for Scales
///   </li>
///   <li>
///     Func_Pregnant: Pregnant Mode for Scales
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEScalesFuncType, closed) {
  DSBLEScalesFuncTypeNone = 0,
  DSBLEScalesFuncTypeCommon = 1,
  DSBLEScalesFuncTypeTime = 2,
  DSBLEScalesFuncTypeSync = 3,
  DSBLEScalesFuncTypeClearData = 4,
  DSBLEScalesFuncTypeWUnit = 5,
  DSBLEScalesFuncTypePregnant = 6,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEScalesType, closed) {
  DSBLEScalesTypeNone = 0,
  DSBLEScalesTypeFat = 1,
  DSBLEScalesTypeBody = 2,
  DSBLEScalesTypeBaby = 3,
  DSBLEScalesTypeKitchen = 4,
};


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth24DSBLEScanConnectDelegate_")
@protocol DSBLEScanConnectDelegate
@optional
/// 蓝牙状态改变反馈
/// \param state state
///
- (void)notifyState:(enum BLEManagerState)state;
/// Retsore state Dict
/// <ul>
///   <li>
///     @seealso            CBCentralManagerRestoredStatePeripheralsKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanServicesKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanOptionsKey;
///   </li>
/// </ul>
/// \param dict 
///
- (void)restoreStateDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
/// 扫描发现设备
/// \param device device
///
- (void)didDiscoverDevice:(DSBLEDevice * _Nonnull)device;
/// 准备连接DFU设备
/// \param device device
///
- (void)connectDFUDevice:(DSBLEDevice * _Nonnull)device;
/// 连接设备
/// \param device device
///
- (void)didConnectDevice:(DSBLEDevice * _Nonnull)device;
/// 断开设备
/// \param device device
///
- (void)didDisconnectDevice:(DSBLEDevice * _Nonnull)device;
@end


/// 久坐数据
/// sedentary reminder class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESedentary")
@interface DSBLESedentary : NSObject
/// Sedentary time.
/// During this time,bracelet will calculate the steps,if not reach the min steps,bracelet will notify user.
/// 30=30 Min
/// 60=60 Min
/// 90=90 Min
@property (nonatomic) NSUInteger sedentaryTime;
/// Yes for Sedentary reminder ON
/// No for Sedentary reminde OFF
@property (nonatomic) BOOL swtich;
/// Date time for bracelet start check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Date time for bracelet stop check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeFuncType, closed) {
  DSBLEShoeFuncTypeNone = 0,
  DSBLEShoeFuncTypeCommon = 1,
  DSBLEShoeFuncTypeVersion = 2,
  DSBLEShoeFuncTypeBattery = 3,
  DSBLEShoeFuncTypeAutoStep = 4,
  DSBLEShoeFuncTypeSync = 5,
  DSBLEShoeFuncTypeSetPace = 6,
  DSBLEShoeFuncTypeTime = 7,
};


/// Shop real time step
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEShoeRTStep")
@interface DSBLEShoeRTStep : NSObject
/// walk step
@property (nonatomic) uint32_t walk;
/// run step
@property (nonatomic) uint32_t run;
/// cycle step
@property (nonatomic) uint32_t cycle;
/// downstairs step
@property (nonatomic) uint32_t downstairs;
/// upstairs step
@property (nonatomic) uint32_t upstairs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum DSBLEShoeStepType : NSUInteger;

/// Shop sync data
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEShoeStepInfo")
@interface DSBLEShoeStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// step type
@property (nonatomic) enum DSBLEShoeStepType type;
/// step
@property (nonatomic) uint32_t step;
/// Duration
@property (nonatomic) NSUInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Shoe Step type
/// <ul>
///   <li>
///     0 other: Sit/Static
///   </li>
///   <li>
///     1 walk:  walk
///   </li>
///   <li>
///     2 run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeStepType, closed) {
  DSBLEShoeStepTypeOther = 0,
  DSBLEShoeStepTypeWalk = 1,
  DSBLEShoeStepTypeRun = 2,
  DSBLEShoeStepTypeDown = 3,
  DSBLEShoeStepTypeUp = 4,
  DSBLEShoeStepTypeCycle = 5,
};

enum DSBLESleepValueType : NSUInteger;
enum DSBLESleepBlockType : NSUInteger;

/// Original sleep info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepBlock")
@interface DSBLESleepBlock : NSObject
/// Time for sleep state.
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// sleep state
@property (nonatomic) enum DSBLESleepValueType value;
/// block type
@property (nonatomic) enum DSBLESleepBlockType type;
/// timeinterval from 2010.1.1 00:00:00
@property (nonatomic) NSUInteger timeInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep block type
/// <ul>
///   <li>
///     0 start: Begin
///   </li>
///   <li>
///     1 entry: Entry sleep
///   </li>
///   <li>
///     2 deep:  Sleeping
///   </li>
///   <li>
///     3 end:   End
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepBlockType, closed) {
  DSBLESleepBlockTypeStart = 0,
  DSBLESleepBlockTypeEntry = 1,
  DSBLESleepBlockTypeDeep = 2,
  DSBLESleepBlockTypeEnd = 3,
};

@class DSBLESleepState;

/// Sleep result model
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESleepInfo")
@interface DSBLESleepInfo : NSObject
/// Begin Time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
/// End time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// light Sleep Duration
@property (nonatomic) NSUInteger lightSleepDuration;
/// deep Sleep Duration
@property (nonatomic) NSUInteger deepSleepDuration;
/// awake duration
@property (nonatomic) NSUInteger awakeDuration;
/// sleep state array
@property (nonatomic, copy) NSArray<DSBLESleepState *> * _Nonnull sleepStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepType : NSUInteger;

/// Sleep state info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepState")
@interface DSBLESleepState : NSObject
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
@property (nonatomic) enum DSBLESleepType state;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep state for app – app sleep info
/// <ul>
///   <li>
///     0 awake: Wake up
///   </li>
///   <li>
///     2 light: Light Sleep
///   </li>
///   <li>
///     3 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepType, closed) {
  DSBLESleepTypeAwake = 0,
  DSBLESleepTypeLight = 2,
  DSBLESleepTypeDeep = 3,
};

/// sleep state for Algorithm — Original sleep info
/// <ul>
///   <li>
///     0  none: None
///   </li>
///   <li>
///     1  wake: Wake up
///   </li>
///   <li>
///     2  walk: Wake And Walk
///   </li>
///   <li>
///     3  run: Wake And Run
///   </li>
///   <li>
///     11 light: Light Sleep
///   </li>
///   <li>
///     12 deep: Deep Sleep
///   </li>
///   <li>
///     13 invalid: Not to wear
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepValueType, closed) {
  DSBLESleepValueTypeNone = 0,
  DSBLESleepValueTypeWake = 1,
  DSBLESleepValueTypeWalk = 2,
  DSBLESleepValueTypeRun = 3,
  DSBLESleepValueTypeLight = 11,
  DSBLESleepValueTypeDeep = 12,
  DSBLESleepValueTypeInvalid = 13,
};

enum DSBLESyncSportType : NSUInteger;
enum DSBLESportType : NSUInteger;

/// Sync Sport
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLESport")
@interface DSBLESport : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 状态
@property (nonatomic) enum DSBLESyncSportType type;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sync Sport2 for Purifit 2.0
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLESport2")
@interface DSBLESport2 : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified startTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据，跑步为步数，其他暂时未支持
@property (nonatomic) NSInteger data;
/// 卡路里，单位为卡
@property (nonatomic) NSInteger cal;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sport info (sync to bracelet) for sport mode (Only for MZ,DS-D9)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESportInfo")
@interface DSBLESportInfo : NSObject
/// Set time,Unit(s) when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
/// Set distance,Unit(m)
@property (nonatomic) NSUInteger distance;
/// Set calorie,Unit(c)
@property (nonatomic) NSUInteger calorie;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLESportState : NSUInteger;

/// Sport set class for sport mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESportSet")
@interface DSBLESportSet : NSObject
/// Set sport state,control bracelet to start or stop sport Mode. (All bracelet except B103)
@property (nonatomic) enum DSBLESportState state;
/// Set sport type. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) enum DSBLESportType type;
/// Set time,Unit(s)  when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Sport state
typedef SWIFT_ENUM(NSUInteger, DSBLESportState, closed) {
  DSBLESportStateStop = 0,
  DSBLESportStateStart = 1,
  DSBLESportStatePause = 2,
};

/// Sport type
typedef SWIFT_ENUM(NSUInteger, DSBLESportType, closed) {
  DSBLESportTypeNormal = 0,
  DSBLESportTypeRun = 1,
  DSBLESportTypeCycling = 2,
  DSBLESportTypeWalk = 3,
  DSBLESportTypeStrength = 4,
  DSBLESportTypeFree = 5,
  DSBLESportTypeSwim = 6,
  DSBLESportTypeSevenMin = 7,
};


/// step info class
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEStepInfo")
@interface DSBLEStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
@property (nonatomic, copy) NSDate * _Null_unspecified starTtime;
/// step type
@property (nonatomic) enum DSBLESportType type;
/// step
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESyncData")
@interface DSBLESyncData : NSObject
/// Original sleeps
@property (nonatomic, copy) NSArray<DSBLESleepBlock *> * _Nonnull sleeps;
/// Steps
@property (nonatomic, copy) NSArray<DSBLEStepInfo *> * _Nonnull steps;
/// heartrates & bloodoxygen
@property (nonatomic, copy) NSArray<DSBLEHeartrate *> * _Nonnull heartratesAndBloodOxygens;
/// BloodPressure
@property (nonatomic, copy) NSArray<DSBLEBloodPressure *> * _Nonnull bloodPressures;
/// PAI
@property (nonatomic, copy) NSArray<DSBLEPAIInfo *> * _Nonnull pais;
/// Sport
@property (nonatomic, copy) NSArray<DSBLESport *> * _Nonnull sports;
/// Shoe Steps
@property (nonatomic, copy) NSArray<DSBLEShoeStepInfo *> * _Nonnull shoeSteps;
/// Sport for 2.0
@property (nonatomic, copy) NSArray<DSBLESport2 *> * _Nonnull sports2;
/// GPS
@property (nonatomic, copy) NSArray<DSBLEGPS *> * _Nonnull gps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 同步过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLESyncDelegate_")
@protocol DSBLESyncDelegate
/// 同步数据 进度
/// progress of data synchronization
/// \param progress progress 进度值(0.0-1.0) progress value
///
///
/// returns:
/// progress
- (void)syncProgressWithDevice:(BLEPeripheral * _Nullable)device progress:(float)progress;
/// 即将开始同步
/// Sync is about to begin
- (void)syncWillStartWithDevice:(BLEPeripheral * _Nullable)device;
/// 同步即将结束
/// Syncing is coming to an end
- (void)syncWillEndWithDevice:(BLEPeripheral * _Nullable)device;
/// 同步出错
/// An error occurred attempting to synchronize
- (void)syncErrorWithDevice:(BLEPeripheral * _Nullable)device;
/// synchronized data(同步后的数据)
/// \param syncData DSBLESyncData
///
- (void)syncFinishedWithDevice:(BLEPeripheral * _Nullable)device syncResultData:(DSBLESyncData * _Nullable)syncData;
@end

/// Sync Sport Type
typedef SWIFT_ENUM(NSUInteger, DSBLESyncSportType, closed) {
  DSBLESyncSportTypeStart = 0,
  DSBLESyncSportTypeStop = 1,
};

/// temperature type
typedef SWIFT_ENUM(NSUInteger, DSBLETemperatureType, closed) {
  DSBLETemperatureTypeNegative = 0,
  DSBLETemperatureTypePositive = 1,
};

/// Text Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Text Display: Portrait
///   </li>
///   <li>
///     Landscape         Text Display: Landscape
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLETextDisplayType, closed) {
  DSBLETextDisplayTypePortrait = 1,
  DSBLETextDisplayTypeLandscape = 0,
};

/// Tracker Notify
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerAutoType, closed) {
/// Get all gsensor from Tracker
  DSBLETrackerAutoTypeGsensor = 0,
/// Get Cast result from Tracker
  DSBLETrackerAutoTypeCast = 1,
  DSBLETrackerAutoTypeOther = 2,
};


/// Tracker Cast Data
SWIFT_CLASS("_TtC14DesayBluetooth16DSBLETrackerCast")
@interface DSBLETrackerCast : NSObject
@property (nonatomic) NSInteger maxX;
@property (nonatomic) NSInteger minX;
@property (nonatomic) NSInteger maxY;
@property (nonatomic) NSInteger minY;
@property (nonatomic) NSInteger maxZ;
@property (nonatomic) NSInteger minZ;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Tracker Cast Log Data
SWIFT_CLASS("_TtC14DesayBluetooth19DSBLETrackerCastLog")
@interface DSBLETrackerCastLog : NSObject
/// UTC Time
@property (nonatomic, copy) NSDate * _Nonnull time;
/// Battery
@property (nonatomic) NSInteger battery;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
/// total of Gsensor data
@property (nonatomic) NSInteger pageNum;
/// Current X
@property (nonatomic) NSInteger currentX;
/// Current Y
@property (nonatomic) NSInteger currentY;
/// Current Z
@property (nonatomic) NSInteger currentZ;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Send Func Type
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerFuncType, closed) {
/// <ul>
///   <li>
///     Func_None: defalt value
///   </li>
/// </ul>
  DSBLETrackerFuncTypeNone = 0,
/// <ul>
///   <li>
///     Func_Common: Can send command by bytes
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCommon = 1,
/// <ul>
///   <li>
///     Func_Version: Get version of tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeVersion = 2,
/// <ul>
///   <li>
///     Func_Time: Set Time
///   </li>
/// </ul>
  DSBLETrackerFuncTypeTime = 3,
/// <ul>
///   <li>
///     Func_Language: Language Setting
///   </li>
/// </ul>
  DSBLETrackerFuncTypeLanguage = 4,
/// <ul>
///   <li>
///     Func_DFU: Upgrade Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeDfu = 5,
/// <ul>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
/// </ul>
  DSBLETrackerFuncTypeHourSystem = 6,
/// <ul>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
/// </ul>
  DSBLETrackerFuncTypeGsensor = 7,
/// <ul>
///   <li>
///     Func_Reset: Clean all data
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReset = 8,
/// <ul>
///   <li>
///     Func_Cast: Setting cast type, event type and GSensor range
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCast = 9,
/// <ul>
///   <li>
///     Func_Fish: Start or stop fish
///   </li>
/// </ul>
  DSBLETrackerFuncTypeFish = 10,
/// <ul>
///   <li>
///     Func_Reboot: Reboot Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReboot = 11,
/// <ul>
///   <li>
///     Func_Bind: Bind Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBind = 12,
/// <ul>
///   <li>
///     Func_Active: Active Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeActive = 13,
/// <ul>
///   <li>
///     Func_SN: Get SN of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSn = 14,
/// <ul>
///   <li>
///     Func_Battery: Get battery of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBattery = 15,
/// <ul>
///   <li>
///     Func_SyncPerios: Set data upload period
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSyncPeriod = 16,
};

/// Unit System
/// <ul>
///   <li>
///     MS: Metric system
///   </li>
///   <li>
///     BS: British system
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEUnitType, closed) {
  DSBLEUnitTypeBS = 0,
  DSBLEUnitTypeMS = 1,
};


/// User information setting
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEUserInfo")
@interface DSBLEUserInfo : NSObject
/// Height Range(100~250)cm
@property (nonatomic) NSUInteger height;
/// Weight Range(25~200)kg
@property (nonatomic) NSUInteger weight;
@property (nonatomic) enum DSBLEGender gender;
/// Age Range(0~125)
@property (nonatomic) NSUInteger age;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Version information
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEVersion")
@interface DSBLEVersion : NSObject
/// User display
@property (nonatomic, copy) NSString * _Nonnull display;
/// Version,use it to judge upgrade firmware.
@property (nonatomic) NSUInteger version;
/// Vendor code
@property (nonatomic, copy) NSString * _Nonnull vendor;
/// Original data
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum DSBLEVibrationType : NSUInteger;

/// Set Vibration pramas (Only for DS-D8,DS-D9,DS-D6,HW01)
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEVibrationSet")
@interface DSBLEVibrationSet : NSObject
/// Vibration type
@property (nonatomic) enum DSBLEVibrationType type;
/// true for open motor vibration, false for close motor vibration
@property (nonatomic) BOOL on;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Motor vibration strength
typedef SWIFT_ENUM(NSUInteger, DSBLEVibrationType, closed) {
  DSBLEVibrationTypeLow = 1,
  DSBLEVibrationTypeMiddle = 2,
  DSBLEVibrationTypeHigh = 3,
};


/// weather
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEWeather")
@interface DSBLEWeather : NSObject
@property (nonatomic) NSInteger aqi;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// weather state
typedef SWIFT_ENUM(NSUInteger, DSBLEWeatherState, closed) {
/// 多云
  DSBLEWeatherStateCloudy = 0,
/// 雷
  DSBLEWeatherStateThunder = 1,
/// 晴天
  DSBLEWeatherStateFine = 2,
/// 乌云
  DSBLEWeatherStateDarkClouds = 3,
/// 雾
  DSBLEWeatherStateFog = 4,
/// 雪
  DSBLEWeatherStateSnow = 5,
/// 雨
  DSBLEWeatherStateRain = 6,
/// 少云
  DSBLEWeatherStatePartlyCloudy = 7,
/// 阵雨
  DSBLEWeatherStateShower = 8,
};

enum DSBLEWristingType : NSUInteger;

/// Wristing Time setting Model
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEWristingTime")
@interface DSBLEWristingTime : NSObject
@property (nonatomic) enum DSBLEWristingType wristingType;
/// Wristing Time extend setting Model (Not include: B521 B103 B502)
/// Add startTime and endTime.
/// start time.
@property (nonatomic, copy) NSDate * _Nullable startTime;
/// end  time.
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Wristing time type
/// wearHabit Which hand to wear
/// <ul>
///   <li>
///     off: 0
///   </li>
///   <li>
///     auto: 1 not all bracelet support this type
///   </li>
///   <li>
///     left: 2
///   </li>
///   <li>
///     right: 3
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEWristingType, closed) {
  DSBLEWristingTypeOff = 0,
  DSBLEWristingTypeAuto = 1,
  DSBLEWristingTypeLeft = 2,
  DSBLEWristingTypeRight = 3,
};





SWIFT_CLASS("_TtC14DesayBluetooth6Scales")
@interface Scales : Device
- (BOOL)hasAuthorized SWIFT_WARN_UNUSED_RESULT;
- (void)authorizedBy:(NSString * _Nonnull)mac callback:(void (^ _Nonnull)(BOOL, NSString * _Nullable))callback;
- (void)makeFunc:(enum DSBLEScalesFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth4Shoe")
@interface Shoe : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEShoeFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth7Tracker")
@interface Tracker : Device
/// notofy data callback
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLETrackerAutoType, id _Nullable, NSError * _Nullable);
/// bind delegate
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
- (void)makeFunc:(enum DSBLETrackerFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef DESAYBLUETOOTH_SWIFT_H
#define DESAYBLUETOOTH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DesayBluetooth",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, APIState, closed) {
  APIStateNormal = 0,
  APIStateDfu = 1,
};

@class NSString;
@class NSNumber;
@protocol DSBLEScanConnectDelegate;

SWIFT_CLASS("_TtC14DesayBluetooth13BLEAPIManager")
@interface BLEAPIManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEAPIManager * _Nonnull shared;)
+ (BLEAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Restore Key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable restoreKey;)
+ (NSString * _Nullable)restoreKey SWIFT_WARN_UNUSED_RESULT;
+ (void)setRestoreKey:(NSString * _Nullable)value;
/// mode
@property (nonatomic) BOOL debug;
- (void)setLogOnWithCode:(NSString * _Nonnull)code;
/// log callback
@property (nonatomic, copy) void (^ _Nullable logOut)(NSString * _Nonnull);
@property (nonatomic, strong) id <DSBLEScanConnectDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol DSBLEDFUDelegate;
@class DSBLEDFUSet;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// API State
@property (nonatomic, readonly) enum APIState apiState;
/// DFU delegate
@property (nonatomic, strong) id <DSBLEDFUDelegate> _Nullable dfuDelegate;
/// handle DFU
/// \param model DSBLEDFUSet
///
- (void)handleDFUWith:(DSBLEDFUSet * _Nonnull)model;
@end

@class CBUUID;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)scan;
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options filterNames:(NSSet<NSString *> * _Nullable)filterNames;
/// stop scan
- (void)stopScan;
/// is Scanning
@property (nonatomic, readonly) BOOL isScaning;
@end

enum BLEManagerState : NSUInteger;
@class BLEPeripheral;
@class CBCharacteristic;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)didUpdateState:(enum BLEManagerState)state;
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// SDK Version
- (NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// BLE State
@property (nonatomic, readonly) enum BLEManagerState bleState;
/// authorization of bluetooth , new in iOS13.
@property (nonatomic, readonly) CBManagerAuthorization authorization SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class Device;
@class DSBLEDevice;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// connect by mac address
/// \param mac mac len = 12 17
///
- (void)connectWithMac:(NSString * _Nullable)mac;
/// connect by identifier
/// \param identifier identifier
///
- (void)connectWithIdentifier:(NSString * _Nullable)identifier;
/// connect by peripheral （last）
/// \param peripheral peripheral
///
- (void)connectPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// disconnected device
/// \param identifier identifier of device
///
- (void)disconnectWithIdentifier:(NSString * _Nullable)identifier;
/// disconnected device
/// \param device BLEPeripheral obj
///
- (void)disconnectPeripheral:(BLEPeripheral * _Nullable)peripheral;
/// disconnected device
/// \param device device obj
///
- (void)disconnectDevice:(Device * _Nullable)device;
/// Connected device list
///
/// returns:
/// Array of DSBLEDevice
- (NSArray<DSBLEDevice *> * _Nonnull)pairedDevice SWIFT_WARN_UNUSED_RESULT;
@end

@class Band;
@class Shoe;
@class Scales;
@class Tracker;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// get all conect device
- (NSDictionary<NSString *, Device *> * _Nonnull)allDevice SWIFT_WARN_UNUSED_RESULT;
/// Find a band device by identifier
/// \param identifier device uuid
///
- (Band * _Nullable)isBandBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a shoe device by identifier
/// \param identifier device uuid
///
- (Shoe * _Nullable)isShoeBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a scales device by identifier
/// \param identifier device uuid
///
- (Scales * _Nullable)isScalesBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// Find a Tracker device by identifier
/// \param identifier device uuid
///
- (Tracker * _Nullable)isTrackerBy:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14DesayBluetooth9BLEDefine")
@interface BLEDefine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultOK;)
+ (NSString * _Nonnull)resultOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultERR;)
+ (NSString * _Nonnull)resultERR SWIFT_WARN_UNUSED_RESULT;
/// MAC 地址长度 12
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger macLen;)
+ (NSInteger)macLen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, BLEManagerState, closed) {
  BLEManagerStateOff = 0,
  BLEManagerStateOn = 1,
};

@class CBPeripheral;
@class CBService;

/// Device Model
SWIFT_CLASS("_TtC14DesayBluetooth13BLEPeripheral")
@interface BLEPeripheral : NSObject
/// CBPeripheral
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull cbPeripheral;
/// identifier of device
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// services
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nonnull services;
/// characteristics
@property (nonatomic, readonly, copy) NSArray<CBCharacteristic *> * _Nonnull characteristics;
/// RSSI  Only have value in scan result
@property (nonatomic, readonly, strong) NSNumber * _Nullable rssi;
/// advertisement Only have value in scan result
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable advertisementData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class DSBLESleepBlock;
@class DSBLESleepInfo;

SWIFT_CLASS("_TtC14DesayBluetooth17BLESleepAlgorithm")
@interface BLESleepAlgorithm : NSObject
/// 分析睡眠数据
/// analyze sleep data
/// @param rawData 睡眠原始数据
/// @return 睡眠状态 NSArray<WMSleepInfo *>
- (NSArray<DSBLESleepInfo *> * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData deviceName:(NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEDeviceType : NSUInteger;
enum DSBLEProtocolType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth7BLEUtil")
@interface BLEUtil : NSObject
/// 标准mac
/// \param mac 不含:的mac
///
///
/// returns:
/// 标准mac
+ (NSString * _Nullable)standardMacBy:(NSString * _Nullable)mac SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备大类型
/// \param name 设备名
///
///
/// returns:
/// 总类型
+ (enum DSBLEDeviceType)deviceTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备协议类型
/// \param name 设备名
///
///
/// returns:
/// 设备协议类型
+ (enum DSBLEProtocolType)protocolTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据厂商代码获取设备名字
/// \param manuCode 厂商代码
///
///
/// returns:
/// 设备名字
+ (NSString * _Nonnull)deviceNameBy:(NSString * _Nonnull)manuCode SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名字获取厂商代码
/// \param name 设备名字
///
///
/// returns:
/// 厂商代码
+ (NSString * _Nonnull)manuCodeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param name 设备名字
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param identifier identifier
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface BLEUtil (SWIFT_EXTENSION(DesayBluetooth))
/// 卡路里计算公式
/// \param weight 重量 千克
///
/// \param distance 距离 米
///
///
/// returns:
/// 小卡
+ (float)calculatorCalorieWithWeight:(float)weight distance:(float)distance SWIFT_WARN_UNUSED_RESULT;
/// 距离计算公式
/// \param height 高度 cm
///
/// \param step 步数
///
///
/// returns:
/// 米
+ (float)calculatorDistanceWithHeight:(float)height step:(NSInteger)step SWIFT_WARN_UNUSED_RESULT;
/// 步数通过结束时间算开始时间
/// \param endTime 结束时间
///
///
/// returns:
/// 开始时间
+ (NSDate * _Nonnull)stepStartTimeBy:(NSDate * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14DesayBluetooth6Device")
@interface Device : NSObject
@property (nonatomic, readonly) BOOL isReady;
- (void)disconnect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum DSBLEAutoType : NSUInteger;
@protocol DSBLEBindDelegate;
@protocol DSBLESyncDelegate;
enum DSBLEBandFuncType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth4Band")
@interface Band : Device
/// notify data callback
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// bind delegate
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// sync delegate
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEBandFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


/// 2.0协议的手环
SWIFT_CLASS("_TtC14DesayBluetooth8BandByte")
@interface BandByte : Band
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end




SWIFT_CLASS("_TtC14DesayBluetooth7BandStr")
@interface BandStr : Band
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end



/// alarm class
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLEAlarm")
@interface DSBLEAlarm : NSObject
/// Alarm No. Default = 0
@property (nonatomic) NSUInteger alarmNO;
/// Main switch 主开关
@property (nonatomic) BOOL switchStatus;
/// Eg Time: 0800
@property (nonatomic, copy) NSString * _Nonnull alarmTime;
/// Monday switch 周一开关
@property (nonatomic) BOOL mondaySwitch;
/// Tuesday switch 周二开关
@property (nonatomic) BOOL tuesdaySwitch;
/// Wednesday swtich 周三开关
@property (nonatomic) BOOL wednesdaySwitch;
/// Thursday switch 周四开关
@property (nonatomic) BOOL thursdaySwitch;
/// Friday switch 周五开关
@property (nonatomic) BOOL fridaySwitch;
/// Saturday switch 周六开关
@property (nonatomic) BOOL saturdaySwitch;
/// Sunday switch 周日开关
@property (nonatomic) BOOL sundaySwitch;
/// Date for Time
@property (nonatomic, copy) NSDate * _Nullable alarmDate;
+ (DSBLEAlarm * _Nullable)alarmWithFormat:(NSString * _Nonnull)format index:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Alert Distance Setting
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEAlertDistance")
@interface DSBLEAlertDistance : NSObject
/// near range
@property (nonatomic) NSUInteger nearRange;
/// far range
@property (nonatomic) NSUInteger farRange;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Alert distance type
/// <ul>
///   <li>
///     near: Near mode
///   </li>
///   <li>
///     far: Far mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAlertType, closed) {
  DSBLEAlertTypeNear = 0,
  DSBLEAlertTypeMedium = 1,
  DSBLEAlertTypeFar = 2,
};


/// ANCS提示设置类.
/// ANCS Setting class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEAppNotify")
@interface DSBLEAppNotify : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyPhoneCall;)
+ (NSString * _Nonnull)kDSBLEAppNotifyPhoneCall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyMessage;)
+ (NSString * _Nonnull)kDSBLEAppNotifyMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWechat;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWechat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyQQ;)
+ (NSString * _Nonnull)kDSBLEAppNotifyQQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyFacebook;)
+ (NSString * _Nonnull)kDSBLEAppNotifyFacebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyTwitter;)
+ (NSString * _Nonnull)kDSBLEAppNotifyTwitter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyEmail;)
+ (NSString * _Nonnull)kDSBLEAppNotifyEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWhatsApp;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWhatsApp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyInstagram;)
+ (NSString * _Nonnull)kDSBLEAppNotifyInstagram SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyLine;)
+ (NSString * _Nonnull)kDSBLEAppNotifyLine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifySkype;)
+ (NSString * _Nonnull)kDSBLEAppNotifySkype SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWeibo;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWeibo SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyHike;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyHike SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyFBMessenger;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyFBMessenger SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGmail;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGmail SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleHangout;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleHangout SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifySnapchat;)
+ (NSString * _Nonnull)kDSBLEAPPNotifySnapchat SWIFT_WARN_UNUSED_RESULT;
/// Add for WW Customer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAPPNotifyGoogleCalendar;)
+ (NSString * _Nonnull)kDSBLEAPPNotifyGoogleCalendar SWIFT_WARN_UNUSED_RESULT;
/// create new App Notify
/// \param dict Dictionary include All reminder setting
///
///
/// returns:
/// DSBLEAppNotify instance
+ (DSBLEAppNotify * _Nullable)appNotifyWithDict:(NSDictionary<NSString *, NSNumber *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNotifyWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getAppNoifiyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)allNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)appNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Bracelet Notify
/// <ul>
///   <li>
///     Auto_CheckHR: Check HR result
///   </li>
///   <li>
///     Auto_SportHR: Real time sport HR
///   </li>
///   <li>
///     Auto_Step: Real time step
///   </li>
///   <li>
///     Auto_FindPhone: Location phone
///   </li>
///   <li>
///     Auto_MusicControl: Musci Control
///   </li>
///   <li>
///     Auto_NoSleep: No sleep
///   </li>
///   <li>
///     Auto_BloodPressure: Blood Pressure
///   </li>
///   <li>
///     Auto_oxygen: HR Oxygen
///   </li>
///   <li>
///     Auto_camera
///   </li>
///   <li>
///     Auto_calorie
///   </li>
///   <li>
///     Auto_pai
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAutoType, closed) {
  DSBLEAutoTypeOther = 0,
  DSBLEAutoTypeCheckHR = 1,
  DSBLEAutoTypeSportHR = 2,
  DSBLEAutoTypeStep = 3,
  DSBLEAutoTypeFindPhone = 4,
  DSBLEAutoTypeMusicControl = 5,
  DSBLEAutoTypeNoSleep = 6,
  DSBLEAutoTypeBloodPressure = 7,
  DSBLEAutoTypeOxygen = 8,
  DSBLEAutoTypeCamera = 9,
  DSBLEAutoTypeCalorie = 10,
  DSBLEAutoTypePai = 11,
  DSBLEAutoTypeSos = 12,
  DSBLEAutoTypeBindResult = 13,
};

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Alarm: Alarm
///   </li>
///   <li>
///     Func_Target: daily step target
///   </li>
///   <li>
///     Func_Notification: Notification reminder
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Reboot: Reboot bracelet
///   </li>
///   <li>
///     Func_Bind: Bind braceelt
///   </li>
///   <li>
///     Func_UserInfo: User Info（height,Weight）
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Language: Language Setting
///   </li>
///   <li>
///     Func_WristingTime: Wear habit and Writing time
///   </li>
///   <li>
///     Func_Sedentary: Sedentary
///   </li>
///   <li>
///     Func_FindBand: Location the bracelet
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Timezone: Set timezone
///   </li>
///   <li>
///     Func_DFU: Upgrade braceelt
///   </li>
///   <li>
///     Func_SaveStep: Save step
///   </li>
///   <li>
///     Func_TestHR: Test HR
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SyncIcon: Show icon of not in bracelet
///   </li>
///   <li>
///     Func_Camera: Remote Camera
///   </li>
///   <li>
///     Func_FindPhone: Location the Phone
///   </li>
///   <li>
///     Func_MusicControl: Music Control
///   </li>
///   <li>
///     Func_Unit: Unit Set
///   </li>
///   <li>
///     Func_AntiLost: Anti Lost
///   </li>
///   <li>
///     Func_HRMonitor: HR Monitor On/Off
///   </li>
///   <li>
///     Func_MusicStatu: Music Statu
///   </li>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
///   <li>
///     Func_SportMode: Sport Mode
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
///   <li>
///     Func_NoSleep: No Sleep On/Off
///   </li>
///   <li>
///     Func_SetRHR: Set Rest Max HR
///   </li>
///   <li>
///     Func_SetDHR: Set Dynamic Max HR
///   </li>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
///   <li>
///     Func_BloodPressure: Check blood pressure
///   </li>
///   <li>
///     Func_Ancs: use with Func_Notification, first send ancs and then send notification setting
///   </li>
///   <li>
///     Func_SportInfo: Set Sport info
///   </li>
///   <li>
///     Func_Motor: Set Motor Vibration type
///   </li>
///   <li>
///     Func_Reset: Clean all data
///   </li>
///   <li>
///     Func_Display: Srceen Display
///   </li>
///   <li>
///     Func_PAI: Set PAI on/off
///   </li>
///   <li>
///     Func_PAILimits: Search PAI limits
///   </li>
///   <li>
///     Func_PAIHR: Set PAI static and dynamic HR
///   </li>
///   <li>
///     Func_Gender
///   </li>
///   <li>
///     Func_PAITotal: Get PAI Total
///   </li>
///   <li>
///     Func_AntiStatus: Bond to auti-lost status
///   </li>
///   <li>
///     Func_AlertDistance: Distance Alert for Band
///   </li>
///   <li>
///     Func_StepGoal: Goal achievement
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEBandFuncType, closed) {
  DSBLEBandFuncTypeNone = 0,
  DSBLEBandFuncTypeCommon = 1,
  DSBLEBandFuncTypeAlarm = 2,
  DSBLEBandFuncTypeTarget = 3,
  DSBLEBandFuncTypeNotification = 4,
  DSBLEBandFuncTypeVersion = 5,
  DSBLEBandFuncTypeReboot = 6,
  DSBLEBandFuncTypeBind = 7,
  DSBLEBandFuncTypeUserInfo = 8,
  DSBLEBandFuncTypeBattery = 9,
  DSBLEBandFuncTypeAutoStep = 10,
  DSBLEBandFuncTypeLanguage = 11,
  DSBLEBandFuncTypeWristingTime = 12,
  DSBLEBandFuncTypeSedentary = 13,
  DSBLEBandFuncTypeFindBand = 14,
  DSBLEBandFuncTypeActive = 15,
  DSBLEBandFuncTypeTime = 16,
  DSBLEBandFuncTypeTimezone = 17,
  DSBLEBandFuncTypeDfu = 18,
  DSBLEBandFuncTypeSaveStep = 19,
  DSBLEBandFuncTypeTestHR = 20,
  DSBLEBandFuncTypeSync = 21,
  DSBLEBandFuncTypeSyncIcon = 22,
  DSBLEBandFuncTypeCamera = 23,
  DSBLEBandFuncTypeFindPhone = 24,
  DSBLEBandFuncTypeMusicControl = 25,
  DSBLEBandFuncTypeUnit = 26,
  DSBLEBandFuncTypeAntiLost = 27,
  DSBLEBandFuncTypeHrMonitor = 28,
  DSBLEBandFuncTypeMusicStatu = 29,
  DSBLEBandFuncTypeHourSystem = 30,
  DSBLEBandFuncTypeSportMode = 31,
  DSBLEBandFuncTypeSetPace = 32,
  DSBLEBandFuncTypeNoSleep = 33,
  DSBLEBandFuncTypeSetRHR = 34,
  DSBLEBandFuncTypeSetDHR = 35,
  DSBLEBandFuncTypeGsensor = 36,
  DSBLEBandFuncTypeBloodPressure = 37,
  DSBLEBandFuncTypeAncs = 38,
  DSBLEBandFuncTypeSportInfo = 39,
  DSBLEBandFuncTypeMotor = 40,
  DSBLEBandFuncTypeReset = 41,
  DSBLEBandFuncTypeDisplay = 42,
  DSBLEBandFuncTypePai = 43,
  DSBLEBandFuncTypePaiLimits = 44,
  DSBLEBandFuncTypePaiHR = 45,
  DSBLEBandFuncTypeGender = 46,
  DSBLEBandFuncTypePaiTotal = 47,
  DSBLEBandFuncTypeClearData = 48,
  DSBLEBandFuncTypeSn = 49,
  DSBLEBandFuncTypeTestBP = 50,
  DSBLEBandFuncTypeConnect = 51,
  DSBLEBandFuncTypeAntiStatus = 52,
  DSBLEBandFuncTypeAlertDistance = 53,
  DSBLEBandFuncTypeAlertType = 54,
  DSBLEBandFuncTypeRestMode = 55,
  DSBLEBandFuncTypeWeather = 56,
  DSBLEBandFuncTypeCalorie = 57,
  DSBLEBandFuncTypeDistance = 58,
  DSBLEBandFuncTypeDrink = 59,
  DSBLEBandFuncTypeDial = 60,
  DSBLEBandFuncTypeAge = 61,
  DSBLEBandFuncTypeBright = 62,
  DSBLEBandFuncTypeStepGoal = 63,
  DSBLEBandFuncTypeClimate = 64,
  DSBLEBandFuncTypeTextDisplay = 65,
  DSBLEBandFuncTypeMac = 66,
};

enum DSBLEBindingState : NSUInteger;

/// 绑定 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLEBindDelegate_")
@protocol DSBLEBindDelegate
/// 处理绑定状态
/// \param state 绑定状态
///
- (void)handleBindState:(enum DSBLEBindingState)state device:(BLEPeripheral * _Nullable)device;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEBindingState, closed) {
  DSBLEBindingStateIdel = 0,
  DSBLEBindingStateBond = 1,
  DSBLEBindingStateActive = 2,
  DSBLEBindingStateSuccess = 3,
  DSBLEBindingStateFail = 4,
};


/// Blood Pressure class
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEBloodPressure")
@interface DSBLEBloodPressure : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 心肌收縮（systole） 高压
@property (nonatomic) NSUInteger systole;
/// 心肌舒張（diastole） 低压
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Set Blood Pressure pramas (Only for DS-D8)
SWIFT_CLASS("_TtC14DesayBluetooth21DSBLEBloodPressureSet")
@interface DSBLEBloodPressureSet : NSObject
/// true for begin blood pressure, false for stop blood pressure
@property (nonatomic) BOOL on;
/// systole for proof test value
@property (nonatomic) NSUInteger systole;
/// diastole for proof test value
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Device display bright type
typedef SWIFT_ENUM(NSUInteger, DSBLEBrightType, closed) {
  DSBLEBrightTypeLow = 0,
  DSBLEBrightTypeMedium = 1,
  DSBLEBrightTypeHigh = 2,
};

enum DSBLEWeatherState : NSUInteger;
enum DSBLETemperatureType : NSUInteger;

/// Climate,send temperature and weather state
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEClimate")
@interface DSBLEClimate : NSObject
@property (nonatomic) enum DSBLEWeatherState weatherState;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// DFU 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth16DSBLEDFUDelegate_")
@protocol DSBLEDFUDelegate
/// DFU进度
/// \param progress 进度
///
- (void)DFUProgress:(float)progress device:(BLEPeripheral * _Nullable)device;
/// DFU开始
- (void)DFUStartWithDevice:(BLEPeripheral * _Nullable)device;
/// DFU结束，成功
- (void)DFUEndWithDevice:(BLEPeripheral * _Nullable)device;
/// DFU出错
/// \param error 出错原因
///
- (void)DFUError:(NSString * _Nonnull)error device:(BLEPeripheral * _Nullable)device;
@end

enum DSBLEOTAFileType : uint8_t;

/// Set DFU
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDFUSet")
@interface DSBLEDFUSet : NSObject
/// device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// device MAC 12 count
@property (nonatomic, copy) NSString * _Nonnull deviceMac;
/// file path
@property (nonatomic, copy) NSString * _Nonnull filePath;
/// file type, Only for BLE Protocol 2.X Devices
@property (nonatomic) enum DSBLEOTAFileType fileType;
/// device identifier
@property (nonatomic, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSBLEScalesData;

SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDevice")
@interface DSBLEDevice : BLEPeripheral
/// type
@property (nonatomic, readonly) enum DSBLEDeviceType type;
@property (nonatomic, readonly, copy) NSString * _Nullable mac;
/// MAC len = 12 + 5
@property (nonatomic, readonly, copy) NSString * _Nullable standardMac;
/// OTA? true false
@property (nonatomic, readonly) BOOL state;
/// 2组 scales data
@property (nonatomic, readonly, strong) DSBLEScalesData * _Nullable scalesData;
/// power (50 = 50%)
@property (nonatomic, readonly) NSInteger power;
/// Name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEDeviceType, closed) {
  DSBLEDeviceTypeBand = 0,
  DSBLEDeviceTypeScales = 1,
  DSBLEDeviceTypeShoe = 2,
  DSBLEDeviceTypeWatch = 3,
  DSBLEDeviceTypeTracker = 4,
  DSBLEDeviceTypeOther = 5,
};

/// Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Screen Display: Portrait
///   </li>
///   <li>
///     LandscapeLeft     Screen Display: Landscape Left
///   </li>
///   <li>
///     LandscapeRight    Screen Display: Landscape Right
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEDisplayType, closed) {
  DSBLEDisplayTypePortrait = 1,
  DSBLEDisplayTypeLandscapeLeft = 2,
  DSBLEDisplayTypeLandscapeRight = 3,
};

/// Fish Cast type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishCastType, closed) {
  DSBLEFishCastTypeSPINNING = 0,
  DSBLEFishCastTypeFLYFISHING = 1,
  DSBLEFishCastTypeTROLLING = 2,
  DSBLEFishCastTypeJIGGING = 3,
  DSBLEFishCastTypeCARPMATCH = 4,
  DSBLEFishCastTypeINSHORE = 5,
  DSBLEFishCastTypePOLE = 6,
};

/// Fish Event type
typedef SWIFT_ENUM(NSUInteger, DSBLEFishEventType, closed) {
  DSBLEFishEventTypeCAST = 0,
  DSBLEFishEventTypeCATCH = 1,
  DSBLEFishEventTypeMARKER = 2,
};


/// GPS Data
SWIFT_CLASS("_TtC14DesayBluetooth8DSBLEGPS")
@interface DSBLEGPS : NSObject
/// longitude 经度
@property (nonatomic) double longitude;
/// latitude 纬度
@property (nonatomic) double latitude;
/// Time
@property (nonatomic, copy) NSDate * _Nonnull time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Gender
/// <ul>
///   <li>
///     male: Man
///   </li>
///   <li>
///     female: Woman
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEGender, closed) {
  DSBLEGenderMale = 0,
  DSBLEGenderFemale = 1,
};


/// Gsensor coordinate
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEGsensor")
@interface DSBLEGsensor : NSObject
@property (nonatomic) NSInteger x;
@property (nonatomic) NSInteger y;
@property (nonatomic) NSInteger z;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// HRMonitor
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHRMonitor")
@interface DSBLEHRMonitor : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// Interval Time for check HR, Default 30min, only support by DS-F9.
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// HeartRate Type
/// <ul>
///   <li>
///     test: test
///   </li>
///   <li>
///     monitor: monitor
///   </li>
///   <li>
///     sport: sport
///   </li>
///   <li>
///     rest: rest
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEHeartRateType, closed) {
  DSBLEHeartRateTypeTest = 0,
  DSBLEHeartRateTypeMonitor = 1,
  DSBLEHeartRateTypeSport = 3,
  DSBLEHeartRateTypeRest = 2,
};


/// heart rate and blood oxygens class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHeartrate")
@interface DSBLEHeartrate : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// heart rate value
@property (nonatomic) enum DSBLEHeartRateType type;
/// heart rate value
@property (nonatomic) NSUInteger hr;
/// blood oxygen value
@property (nonatomic) NSUInteger bo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEHourSystemType, closed) {
  DSBLEHourSystemTypeHour12 = 0,
  DSBLEHourSystemTypeHour24 = 1,
};

/// Bracelet Support Language
/// <ul>
///   <li>
///     EN:  English
///   </li>
///   <li>
///     CHS: Chinese
///   </li>
///   <li>
///     FR:  French
///   </li>
///   <li>
///     IT:  Italian
///   </li>
///   <li>
///     ES:  Spanish
///   </li>
///   <li>
///     TR:  Turkish
///   </li>
///   <li>
///     PL:  Polish
///   </li>
///   <li>
///     JP:  Japanese
///   </li>
///   <li>
///     HU:  Hungarian
///   </li>
///   <li>
///     DS:  German
///   </li>
///   <li>
///     RU:  Russian
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLELanguageType, closed) {
  DSBLELanguageTypeEN = 0,
  DSBLELanguageTypeCHS = 1,
  DSBLELanguageTypeFR = 2,
  DSBLELanguageTypeIT = 3,
  DSBLELanguageTypeES = 4,
  DSBLELanguageTypeTR = 5,
  DSBLELanguageTypePL = 6,
  DSBLELanguageTypeJP = 7,
  DSBLELanguageTypeHU = 8,
  DSBLELanguageTypeDS = 9,
  DSBLELanguageTypeRU = 10,
};


/// NoSleep feedback Only for LE
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLENoSleep")
@interface DSBLENoSleep : NSObject
/// total min
@property (nonatomic) NSUInteger total;
/// less time
@property (nonatomic) NSUInteger timeInterval;
/// when set to bracelet, feedback just return ok/err
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Device OTA file type, Only for BLE Protocol 2.0 Device
typedef SWIFT_ENUM(uint8_t, DSBLEOTAFileType, closed) {
  DSBLEOTAFileTypeFramework = 0x00,
  DSBLEOTAFileTypeAgps = 0x04,
};


/// PAI Heartrate
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEPAIHeartrate")
@interface DSBLEPAIHeartrate : NSObject
/// Static Heartrate
@property (nonatomic) NSUInteger staticHR;
/// Max Heartrate
@property (nonatomic) NSUInteger maxHR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEPAIValueType : NSUInteger;

/// PAI result info
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEPAIInfo")
@interface DSBLEPAIInfo : NSObject
/// Time for pai
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// Value type
@property (nonatomic) enum DSBLEPAIValueType type;
/// pai
@property (nonatomic) NSUInteger value;
/// pai interval
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Limits Only for LE(HW01-Pro HW02-Plus)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEPAILimits")
@interface DSBLEPAILimits : NSObject
/// low limits
@property (nonatomic) NSUInteger low;
/// medium limits
@property (nonatomic) NSUInteger medium;
/// high limits
@property (nonatomic) NSUInteger high;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Seting
/// <ul>
///   <li>
///     off: off
///   </li>
///   <li>
///     normal: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIType, closed) {
  DSBLEPAITypeOff = 0,
  DSBLEPAITypeNormal = 1,
  DSBLEPAITypeHigh = 2,
};


/// PAI value
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEPAIValue")
@interface DSBLEPAIValue : NSObject
/// total Pai
@property (nonatomic) NSUInteger totalPAI;
/// daily Pai
@property (nonatomic) NSUInteger dailyPAI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Value Type
/// <ul>
///   <li>
///     low: off
///   </li>
///   <li>
///     medium: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIValueType, closed) {
  DSBLEPAIValueTypeLow = 0,
  DSBLEPAIValueTypeMedium = 1,
  DSBLEPAIValueTypeHigh = 2,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEProtocolType, closed) {
  DSBLEProtocolTypeOther = 0,
  DSBLEProtocolTypeBand1_103 = 1,
  DSBLEProtocolTypeBand1_521 = 2,
  DSBLEProtocolTypeBand1_Z18 = 3,
  DSBLEProtocolTypeBand2 = 4,
  DSBLEProtocolTypeScalesLF = 5,
  DSBLEProtocolTypeScalesCS = 6,
  DSBLEProtocolTypeShoeDS = 7,
  DSBLEProtocolTypeTracker06 = 8,
  DSBLEProtocolTypeBand_Freq = 9,
};


/// Rest mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLERestMode")
@interface DSBLERestMode : NSObject
/// swtich
@property (nonatomic) BOOL swtich;
/// startTime
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// endTime
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLEScalesType : NSUInteger;

/// Scales sync data
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEScalesData")
@interface DSBLEScalesData : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// type
@property (nonatomic) enum DSBLEScalesType type;
/// weight (g)
@property (nonatomic) float weight;
/// impedance
@property (nonatomic) NSUInteger impedance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_WUnit: Weight Unit for Scales
///   </li>
///   <li>
///     Func_Pregnant: Pregnant Mode for Scales
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEScalesFuncType, closed) {
  DSBLEScalesFuncTypeNone = 0,
  DSBLEScalesFuncTypeCommon = 1,
  DSBLEScalesFuncTypeTime = 2,
  DSBLEScalesFuncTypeSync = 3,
  DSBLEScalesFuncTypeClearData = 4,
  DSBLEScalesFuncTypeWUnit = 5,
  DSBLEScalesFuncTypePregnant = 6,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEScalesType, closed) {
  DSBLEScalesTypeNone = 0,
  DSBLEScalesTypeFat = 1,
  DSBLEScalesTypeBody = 2,
  DSBLEScalesTypeBaby = 3,
  DSBLEScalesTypeKitchen = 4,
};


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth24DSBLEScanConnectDelegate_")
@protocol DSBLEScanConnectDelegate
@optional
/// 蓝牙状态改变反馈
/// \param state state
///
- (void)notifyState:(enum BLEManagerState)state;
/// Retsore state Dict
/// <ul>
///   <li>
///     @seealso            CBCentralManagerRestoredStatePeripheralsKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanServicesKey;
///   </li>
///   <li>
///     @seealso            CBCentralManagerRestoredStateScanOptionsKey;
///   </li>
/// </ul>
/// \param dict 
///
- (void)restoreStateDict:(NSDictionary<NSString *, id> * _Nonnull)dict;
/// 扫描发现设备
/// \param device device
///
- (void)didDiscoverDevice:(DSBLEDevice * _Nonnull)device;
/// 准备连接DFU设备
/// \param device device
///
- (void)connectDFUDevice:(DSBLEDevice * _Nonnull)device;
/// 连接设备
/// \param device device
///
- (void)didConnectDevice:(DSBLEDevice * _Nonnull)device;
/// 断开设备
/// \param device device
///
- (void)didDisconnectDevice:(DSBLEDevice * _Nonnull)device;
@end


/// 久坐数据
/// sedentary reminder class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESedentary")
@interface DSBLESedentary : NSObject
/// Sedentary time.
/// During this time,bracelet will calculate the steps,if not reach the min steps,bracelet will notify user.
/// 30=30 Min
/// 60=60 Min
/// 90=90 Min
@property (nonatomic) NSUInteger sedentaryTime;
/// Yes for Sedentary reminder ON
/// No for Sedentary reminde OFF
@property (nonatomic) BOOL swtich;
/// Date time for bracelet start check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Date time for bracelet stop check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeFuncType, closed) {
  DSBLEShoeFuncTypeNone = 0,
  DSBLEShoeFuncTypeCommon = 1,
  DSBLEShoeFuncTypeVersion = 2,
  DSBLEShoeFuncTypeBattery = 3,
  DSBLEShoeFuncTypeAutoStep = 4,
  DSBLEShoeFuncTypeSync = 5,
  DSBLEShoeFuncTypeSetPace = 6,
  DSBLEShoeFuncTypeTime = 7,
};


/// Shop real time step
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEShoeRTStep")
@interface DSBLEShoeRTStep : NSObject
/// walk step
@property (nonatomic) uint32_t walk;
/// run step
@property (nonatomic) uint32_t run;
/// cycle step
@property (nonatomic) uint32_t cycle;
/// downstairs step
@property (nonatomic) uint32_t downstairs;
/// upstairs step
@property (nonatomic) uint32_t upstairs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum DSBLEShoeStepType : NSUInteger;

/// Shop sync data
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEShoeStepInfo")
@interface DSBLEShoeStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// step type
@property (nonatomic) enum DSBLEShoeStepType type;
/// step
@property (nonatomic) uint32_t step;
/// Duration
@property (nonatomic) NSUInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Shoe Step type
/// <ul>
///   <li>
///     0 other: Sit/Static
///   </li>
///   <li>
///     1 walk:  walk
///   </li>
///   <li>
///     2 run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeStepType, closed) {
  DSBLEShoeStepTypeOther = 0,
  DSBLEShoeStepTypeWalk = 1,
  DSBLEShoeStepTypeRun = 2,
  DSBLEShoeStepTypeDown = 3,
  DSBLEShoeStepTypeUp = 4,
  DSBLEShoeStepTypeCycle = 5,
};

enum DSBLESleepValueType : NSUInteger;
enum DSBLESleepBlockType : NSUInteger;

/// Original sleep info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepBlock")
@interface DSBLESleepBlock : NSObject
/// Time for sleep state.
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// sleep state
@property (nonatomic) enum DSBLESleepValueType value;
/// block type
@property (nonatomic) enum DSBLESleepBlockType type;
/// timeinterval from 2010.1.1 00:00:00
@property (nonatomic) NSUInteger timeInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep block type
/// <ul>
///   <li>
///     0 start: Begin
///   </li>
///   <li>
///     1 entry: Entry sleep
///   </li>
///   <li>
///     2 deep:  Sleeping
///   </li>
///   <li>
///     3 end:   End
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepBlockType, closed) {
  DSBLESleepBlockTypeStart = 0,
  DSBLESleepBlockTypeEntry = 1,
  DSBLESleepBlockTypeDeep = 2,
  DSBLESleepBlockTypeEnd = 3,
};

@class DSBLESleepState;

/// Sleep result model
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESleepInfo")
@interface DSBLESleepInfo : NSObject
/// Begin Time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
/// End time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// light Sleep Duration
@property (nonatomic) NSUInteger lightSleepDuration;
/// deep Sleep Duration
@property (nonatomic) NSUInteger deepSleepDuration;
/// awake duration
@property (nonatomic) NSUInteger awakeDuration;
/// sleep state array
@property (nonatomic, copy) NSArray<DSBLESleepState *> * _Nonnull sleepStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepType : NSUInteger;

/// Sleep state info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepState")
@interface DSBLESleepState : NSObject
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
@property (nonatomic) enum DSBLESleepType state;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep state for app – app sleep info
/// <ul>
///   <li>
///     0 awake: Wake up
///   </li>
///   <li>
///     2 light: Light Sleep
///   </li>
///   <li>
///     3 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepType, closed) {
  DSBLESleepTypeAwake = 0,
  DSBLESleepTypeLight = 2,
  DSBLESleepTypeDeep = 3,
};

/// sleep state for Algorithm — Original sleep info
/// <ul>
///   <li>
///     0  none: None
///   </li>
///   <li>
///     1  wake: Wake up
///   </li>
///   <li>
///     2  walk: Wake And Walk
///   </li>
///   <li>
///     3  run: Wake And Run
///   </li>
///   <li>
///     11 light: Light Sleep
///   </li>
///   <li>
///     12 deep: Deep Sleep
///   </li>
///   <li>
///     13 invalid: Not to wear
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepValueType, closed) {
  DSBLESleepValueTypeNone = 0,
  DSBLESleepValueTypeWake = 1,
  DSBLESleepValueTypeWalk = 2,
  DSBLESleepValueTypeRun = 3,
  DSBLESleepValueTypeLight = 11,
  DSBLESleepValueTypeDeep = 12,
  DSBLESleepValueTypeInvalid = 13,
};

enum DSBLESyncSportType : NSUInteger;
enum DSBLESportType : NSUInteger;

/// Sync Sport
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLESport")
@interface DSBLESport : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 状态
@property (nonatomic) enum DSBLESyncSportType type;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sync Sport2 for Purifit 2.0
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLESport2")
@interface DSBLESport2 : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified startTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// 类型
@property (nonatomic) enum DSBLESportType sType;
/// 数据，跑步为步数，其他暂时未支持
@property (nonatomic) NSInteger data;
/// 卡路里，单位为卡
@property (nonatomic) NSInteger cal;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sport info (sync to bracelet) for sport mode (Only for MZ,DS-D9)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESportInfo")
@interface DSBLESportInfo : NSObject
/// Set time,Unit(s) when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
/// Set distance,Unit(m)
@property (nonatomic) NSUInteger distance;
/// Set calorie,Unit(c)
@property (nonatomic) NSUInteger calorie;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum DSBLESportState : NSUInteger;

/// Sport set class for sport mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESportSet")
@interface DSBLESportSet : NSObject
/// Set sport state,control bracelet to start or stop sport Mode. (All bracelet except B103)
@property (nonatomic) enum DSBLESportState state;
/// Set sport type. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) enum DSBLESportType type;
/// Set time,Unit(s)  when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Sport state
typedef SWIFT_ENUM(NSUInteger, DSBLESportState, closed) {
  DSBLESportStateStop = 0,
  DSBLESportStateStart = 1,
  DSBLESportStatePause = 2,
};

/// Sport type
typedef SWIFT_ENUM(NSUInteger, DSBLESportType, closed) {
  DSBLESportTypeNormal = 0,
  DSBLESportTypeRun = 1,
  DSBLESportTypeCycling = 2,
  DSBLESportTypeWalk = 3,
  DSBLESportTypeStrength = 4,
  DSBLESportTypeFree = 5,
  DSBLESportTypeSwim = 6,
  DSBLESportTypeSevenMin = 7,
};


/// step info class
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEStepInfo")
@interface DSBLEStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
@property (nonatomic, copy) NSDate * _Null_unspecified starTtime;
/// step type
@property (nonatomic) enum DSBLESportType type;
/// step
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESyncData")
@interface DSBLESyncData : NSObject
/// Original sleeps
@property (nonatomic, copy) NSArray<DSBLESleepBlock *> * _Nonnull sleeps;
/// Steps
@property (nonatomic, copy) NSArray<DSBLEStepInfo *> * _Nonnull steps;
/// heartrates & bloodoxygen
@property (nonatomic, copy) NSArray<DSBLEHeartrate *> * _Nonnull heartratesAndBloodOxygens;
/// BloodPressure
@property (nonatomic, copy) NSArray<DSBLEBloodPressure *> * _Nonnull bloodPressures;
/// PAI
@property (nonatomic, copy) NSArray<DSBLEPAIInfo *> * _Nonnull pais;
/// Sport
@property (nonatomic, copy) NSArray<DSBLESport *> * _Nonnull sports;
/// Shoe Steps
@property (nonatomic, copy) NSArray<DSBLEShoeStepInfo *> * _Nonnull shoeSteps;
/// Sport for 2.0
@property (nonatomic, copy) NSArray<DSBLESport2 *> * _Nonnull sports2;
/// GPS
@property (nonatomic, copy) NSArray<DSBLEGPS *> * _Nonnull gps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 同步过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLESyncDelegate_")
@protocol DSBLESyncDelegate
/// 同步数据 进度
/// progress of data synchronization
/// \param progress progress 进度值(0.0-1.0) progress value
///
///
/// returns:
/// progress
- (void)syncProgressWithDevice:(BLEPeripheral * _Nullable)device progress:(float)progress;
/// 即将开始同步
/// Sync is about to begin
- (void)syncWillStartWithDevice:(BLEPeripheral * _Nullable)device;
/// 同步即将结束
/// Syncing is coming to an end
- (void)syncWillEndWithDevice:(BLEPeripheral * _Nullable)device;
/// 同步出错
/// An error occurred attempting to synchronize
- (void)syncErrorWithDevice:(BLEPeripheral * _Nullable)device;
/// synchronized data(同步后的数据)
/// \param syncData DSBLESyncData
///
- (void)syncFinishedWithDevice:(BLEPeripheral * _Nullable)device syncResultData:(DSBLESyncData * _Nullable)syncData;
@end

/// Sync Sport Type
typedef SWIFT_ENUM(NSUInteger, DSBLESyncSportType, closed) {
  DSBLESyncSportTypeStart = 0,
  DSBLESyncSportTypeStop = 1,
};

/// temperature type
typedef SWIFT_ENUM(NSUInteger, DSBLETemperatureType, closed) {
  DSBLETemperatureTypeNegative = 0,
  DSBLETemperatureTypePositive = 1,
};

/// Text Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Text Display: Portrait
///   </li>
///   <li>
///     Landscape         Text Display: Landscape
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLETextDisplayType, closed) {
  DSBLETextDisplayTypePortrait = 1,
  DSBLETextDisplayTypeLandscape = 0,
};

/// Tracker Notify
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerAutoType, closed) {
/// Get all gsensor from Tracker
  DSBLETrackerAutoTypeGsensor = 0,
/// Get Cast result from Tracker
  DSBLETrackerAutoTypeCast = 1,
  DSBLETrackerAutoTypeOther = 2,
};


/// Tracker Cast Data
SWIFT_CLASS("_TtC14DesayBluetooth16DSBLETrackerCast")
@interface DSBLETrackerCast : NSObject
@property (nonatomic) NSInteger maxX;
@property (nonatomic) NSInteger minX;
@property (nonatomic) NSInteger maxY;
@property (nonatomic) NSInteger minY;
@property (nonatomic) NSInteger maxZ;
@property (nonatomic) NSInteger minZ;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Tracker Cast Log Data
SWIFT_CLASS("_TtC14DesayBluetooth19DSBLETrackerCastLog")
@interface DSBLETrackerCastLog : NSObject
/// UTC Time
@property (nonatomic, copy) NSDate * _Nonnull time;
/// Battery
@property (nonatomic) NSInteger battery;
/// Fish type
@property (nonatomic) enum DSBLEFishCastType fishType;
/// Event type
@property (nonatomic) enum DSBLEFishEventType eventType;
/// total of Gsensor data
@property (nonatomic) NSInteger pageNum;
/// Current X
@property (nonatomic) NSInteger currentX;
/// Current Y
@property (nonatomic) NSInteger currentY;
/// Current Z
@property (nonatomic) NSInteger currentZ;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Send Func Type
typedef SWIFT_ENUM(NSUInteger, DSBLETrackerFuncType, closed) {
/// <ul>
///   <li>
///     Func_None: defalt value
///   </li>
/// </ul>
  DSBLETrackerFuncTypeNone = 0,
/// <ul>
///   <li>
///     Func_Common: Can send command by bytes
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCommon = 1,
/// <ul>
///   <li>
///     Func_Version: Get version of tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeVersion = 2,
/// <ul>
///   <li>
///     Func_Time: Set Time
///   </li>
/// </ul>
  DSBLETrackerFuncTypeTime = 3,
/// <ul>
///   <li>
///     Func_Language: Language Setting
///   </li>
/// </ul>
  DSBLETrackerFuncTypeLanguage = 4,
/// <ul>
///   <li>
///     Func_DFU: Upgrade Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeDfu = 5,
/// <ul>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
/// </ul>
  DSBLETrackerFuncTypeHourSystem = 6,
/// <ul>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
/// </ul>
  DSBLETrackerFuncTypeGsensor = 7,
/// <ul>
///   <li>
///     Func_Reset: Clean all data
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReset = 8,
/// <ul>
///   <li>
///     Func_Cast: Setting cast type, event type and GSensor range
///   </li>
/// </ul>
  DSBLETrackerFuncTypeCast = 9,
/// <ul>
///   <li>
///     Func_Fish: Start or stop fish
///   </li>
/// </ul>
  DSBLETrackerFuncTypeFish = 10,
/// <ul>
///   <li>
///     Func_Reboot: Reboot Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeReboot = 11,
/// <ul>
///   <li>
///     Func_Bind: Bind Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBind = 12,
/// <ul>
///   <li>
///     Func_Active: Active Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeActive = 13,
/// <ul>
///   <li>
///     Func_SN: Get SN of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSn = 14,
/// <ul>
///   <li>
///     Func_Battery: Get battery of Tracker
///   </li>
/// </ul>
  DSBLETrackerFuncTypeBattery = 15,
/// <ul>
///   <li>
///     Func_SyncPerios: Set data upload period
///   </li>
/// </ul>
  DSBLETrackerFuncTypeSyncPeriod = 16,
};

/// Unit System
/// <ul>
///   <li>
///     MS: Metric system
///   </li>
///   <li>
///     BS: British system
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEUnitType, closed) {
  DSBLEUnitTypeBS = 0,
  DSBLEUnitTypeMS = 1,
};


/// User information setting
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEUserInfo")
@interface DSBLEUserInfo : NSObject
/// Height Range(100~250)cm
@property (nonatomic) NSUInteger height;
/// Weight Range(25~200)kg
@property (nonatomic) NSUInteger weight;
@property (nonatomic) enum DSBLEGender gender;
/// Age Range(0~125)
@property (nonatomic) NSUInteger age;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Version information
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEVersion")
@interface DSBLEVersion : NSObject
/// User display
@property (nonatomic, copy) NSString * _Nonnull display;
/// Version,use it to judge upgrade firmware.
@property (nonatomic) NSUInteger version;
/// Vendor code
@property (nonatomic, copy) NSString * _Nonnull vendor;
/// Original data
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


enum DSBLEVibrationType : NSUInteger;

/// Set Vibration pramas (Only for DS-D8,DS-D9,DS-D6,HW01)
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEVibrationSet")
@interface DSBLEVibrationSet : NSObject
/// Vibration type
@property (nonatomic) enum DSBLEVibrationType type;
/// true for open motor vibration, false for close motor vibration
@property (nonatomic) BOOL on;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Motor vibration strength
typedef SWIFT_ENUM(NSUInteger, DSBLEVibrationType, closed) {
  DSBLEVibrationTypeLow = 1,
  DSBLEVibrationTypeMiddle = 2,
  DSBLEVibrationTypeHigh = 3,
};


/// weather
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEWeather")
@interface DSBLEWeather : NSObject
@property (nonatomic) NSInteger aqi;
@property (nonatomic) enum DSBLETemperatureType type;
@property (nonatomic) NSInteger temperature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// weather state
typedef SWIFT_ENUM(NSUInteger, DSBLEWeatherState, closed) {
/// 多云
  DSBLEWeatherStateCloudy = 0,
/// 雷
  DSBLEWeatherStateThunder = 1,
/// 晴天
  DSBLEWeatherStateFine = 2,
/// 乌云
  DSBLEWeatherStateDarkClouds = 3,
/// 雾
  DSBLEWeatherStateFog = 4,
/// 雪
  DSBLEWeatherStateSnow = 5,
/// 雨
  DSBLEWeatherStateRain = 6,
/// 少云
  DSBLEWeatherStatePartlyCloudy = 7,
/// 阵雨
  DSBLEWeatherStateShower = 8,
};

enum DSBLEWristingType : NSUInteger;

/// Wristing Time setting Model
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEWristingTime")
@interface DSBLEWristingTime : NSObject
@property (nonatomic) enum DSBLEWristingType wristingType;
/// Wristing Time extend setting Model (Not include: B521 B103 B502)
/// Add startTime and endTime.
/// start time.
@property (nonatomic, copy) NSDate * _Nullable startTime;
/// end  time.
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Wristing time type
/// wearHabit Which hand to wear
/// <ul>
///   <li>
///     off: 0
///   </li>
///   <li>
///     auto: 1 not all bracelet support this type
///   </li>
///   <li>
///     left: 2
///   </li>
///   <li>
///     right: 3
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEWristingType, closed) {
  DSBLEWristingTypeOff = 0,
  DSBLEWristingTypeAuto = 1,
  DSBLEWristingTypeLeft = 2,
  DSBLEWristingTypeRight = 3,
};





SWIFT_CLASS("_TtC14DesayBluetooth6Scales")
@interface Scales : Device
- (BOOL)hasAuthorized SWIFT_WARN_UNUSED_RESULT;
- (void)authorizedBy:(NSString * _Nonnull)mac callback:(void (^ _Nonnull)(BOOL, NSString * _Nullable))callback;
- (void)makeFunc:(enum DSBLEScalesFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth4Shoe")
@interface Shoe : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeFunc:(enum DSBLEShoeFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end


SWIFT_CLASS("_TtC14DesayBluetooth7Tracker")
@interface Tracker : Device
/// notofy data callback
@property (nonatomic, copy) void (^ _Nullable notify)(BLEPeripheral * _Nullable, enum DSBLETrackerAutoType, id _Nullable, NSError * _Nullable);
/// bind delegate
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
- (void)makeFunc:(enum DSBLETrackerFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(BLEPeripheral * _Nullable, id _Nullable, BOOL, NSError * _Nullable))callback;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
