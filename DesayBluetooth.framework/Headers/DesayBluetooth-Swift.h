// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import CoreBluetooth;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("DesayBluetooth")
typedef SWIFT_ENUM(NSInteger, APIState) {
  APIStateNormal = 0,
  APIStateDfu = 1,
};

@class Band;
@class Scales;
@class Shoe;
@protocol DSBLEScanConnectDelegate;

SWIFT_CLASS("_TtC14DesayBluetooth13BLEAPIManager")
@interface BLEAPIManager : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEAPIManager * _Nonnull shared;)
+ (BLEAPIManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 手环
@property (nonatomic, strong) Band * _Nullable band;
/// 称
@property (nonatomic, strong) Scales * _Nullable scales;
@property (nonatomic, strong) Shoe * _Nullable shoe;
/// mode
@property (nonatomic) BOOL debug;
- (void)setLogOnWithCode:(NSString * _Nonnull)code;
/// 外部需要的log反馈
@property (nonatomic, copy) void (^ _Nullable logOut)(NSString * _Nonnull);
@property (nonatomic, strong) id <DSBLEScanConnectDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



@class CBUUID;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)scan;
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options filterNames:(NSArray<NSString *> * _Nullable)filterNames;
/// 停止扫描
- (void)stopScan;
@end

enum BLEManagerState : NSUInteger;
@class BLEPeripheral;
@class CBCharacteristic;

/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth18BLEManagerDelegate_")
@protocol BLEManagerDelegate
@optional
/// 蓝牙状态反馈
/// \param state 状态
///
- (void)didUpdateState:(enum BLEManagerState)state;
/// 扫描发现设备反馈
/// \param peripheral 设备
///
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// 设备连接还是断开
/// \param peripheral 设备
///
/// \param isReady 连接且准备OK，还是断开
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
/// 数据反馈
/// \param peripheral 设备
///
/// \param characteristic 通道
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// 写完数据反馈
/// \param peripheral 设备
///
/// \param characteristic 通道
///
/// \param error 错误
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didWriteValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth)) <BLEManagerDelegate>
- (void)didUpdateState:(enum BLEManagerState)state;
- (void)didDiscoverPeripheral:(BLEPeripheral * _Nonnull)peripheral;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral isReady:(BOOL)isReady error:(NSError * _Nullable)error;
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral didUpdateValueFor:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end


@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// Mac连接
/// \param mac mac len = 12
///
- (void)connectWithMac:(NSString * _Nullable)mac;
/// identifier 连接
/// \param identifier identifier
///
- (void)connectWithIdentifier:(NSString * _Nullable)identifier;
/// 连接设备 （last）
/// \param peripheral peripheral
///
- (void)connectPeripheral:(BLEPeripheral * _Nonnull)peripheral;
/// 通过identifier断开连接
/// \param identifier identifier
///
- (void)disconnectWithIdentifier:(NSString * _Nullable)identifier;
/// 断开连接 （last）
/// \param peripheral peripheral
///
- (void)disconnectPeripheral:(BLEPeripheral * _Nullable)peripheral;
@end

@protocol DSBLEDFUDelegate;
@class DSBLEDFUSet;

@interface BLEAPIManager (SWIFT_EXTENSION(DesayBluetooth))
/// API State
@property (nonatomic, readonly) enum APIState apiState;
/// DFU代理
@property (nonatomic, strong) id <DSBLEDFUDelegate> _Nullable dfuDelegate;
/// 请求DFU
/// \param model DSBLEDFUSet
///
- (void)handleDFUWith:(DSBLEDFUSet * _Nonnull)model;
@end


SWIFT_CLASS("_TtC14DesayBluetooth9BLEDefine")
@interface BLEDefine : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultOK;)
+ (NSString * _Nonnull)resultOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull resultERR;)
+ (NSString * _Nonnull)resultERR SWIFT_WARN_UNUSED_RESULT;
/// MAC 地址长度 12
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger macLen;)
+ (NSInteger)macLen SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CBCentralManager;

SWIFT_CLASS("_TtC14DesayBluetooth10BLEManager")
@interface BLEManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLEManager * _Nonnull shared;)
+ (BLEManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 中心
@property (nonatomic, readonly, strong) CBCentralManager * _Nonnull centralManager;
/// 状态
@property (nonatomic, readonly) enum BLEManagerState state;
@property (nonatomic, strong) id <BLEManagerDelegate> _Nullable delegate;
/// 服务通道列表 /// 在调用连接前要配置好，不然无效
@property (nonatomic, copy) NSArray<NSString *> * _Nullable discoverServices;
/// 需要设置notify的特征值列表 /// 在调用连接前要配置好，不然无效
@property (nonatomic, copy) NSArray<NSString *> * _Nullable needNotifycharacteristics;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
- (BLEPeripheral * _Nullable)peripheralBy:(NSString * _Nullable)identifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
/// 扫描设备
- (void)scanWithServices:(NSArray<CBUUID *> * _Nullable)serviceUUIDs options:(NSDictionary<NSString *, id> * _Nullable)options;
/// 停止扫描
- (void)stopScan;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
/// 读取
/// \param characteristic 特征值
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral readValuefor:(CBCharacteristic * _Nonnull)characteristic;
/// 写数据
/// \param data 数据
///
/// \param characteristic 类型
///
/// \param type 类型，默认无反馈
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral writeValue:(NSData * _Nonnull)data for:(CBCharacteristic * _Nonnull)characteristic type:(CBCharacteristicWriteType)type;
/// 写数据
/// \param data 数据
///
/// \param characteristic 类型
///
- (void)peripheral:(BLEPeripheral * _Nonnull)peripheral writeValue:(NSData * _Nonnull)data for:(CBCharacteristic * _Nonnull)characteristic;
@end


@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
/// 扫描后连接设备
/// \param peripheral 设备
///
- (void)connect:(BLEPeripheral * _Nonnull)peripheral options:(NSDictionary<NSString *, id> * _Nullable)options;
/// identifiers连接
/// \param identifiers identifiers
///
///
/// returns:
/// 设备列表
- (NSArray<BLEPeripheral *> * _Nonnull)retrievePeripheralsWithIdentifiers:(NSArray<NSUUID *> * _Nonnull)identifiers SWIFT_WARN_UNUSED_RESULT;
/// 连接已经连接的设备
/// \param serviceUUIDs 服务列表
///
///
/// returns:
/// 设备列表
- (NSArray<BLEPeripheral *> * _Nonnull)retrieveConnectedPeripheralsWithServices:(NSArray<CBUUID *> * _Nonnull)serviceUUIDs SWIFT_WARN_UNUSED_RESULT;
/// 断开设备连接
/// \param peripheral 设备
///
- (void)disconnect:(BLEPeripheral * _Nullable)peripheral;
@end

@class CBPeripheral;
@class NSNumber;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

@class CBService;
@class CBDescriptor;

@interface BLEManager (SWIFT_EXTENSION(DesayBluetooth))
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didReadRSSI:(NSNumber * _Nonnull)RSSI error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForDescriptor:(CBDescriptor * _Nonnull)descriptor error:(NSError * _Nullable)error;
@end


typedef SWIFT_ENUM(NSUInteger, BLEManagerState) {
  BLEManagerStateOff = 0,
  BLEManagerStateOn = 1,
};


/// 模型
SWIFT_CLASS("_TtC14DesayBluetooth13BLEPeripheral")
@interface BLEPeripheral : NSObject
/// CBPeripheral
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull cbPeripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSArray<CBService *> * _Nonnull services;
@property (nonatomic, readonly, copy) NSArray<CBCharacteristic *> * _Nonnull characteristics;
@property (nonatomic, readonly, strong) NSNumber * _Nullable rssi;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable advertisementData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class DSBLESleepBlock;
@class DSBLESleepInfo;

SWIFT_CLASS("_TtC14DesayBluetooth17BLESleepAlgorithm")
@interface BLESleepAlgorithm : NSObject
/// 分析睡眠数据
/// @param rawData 睡眠原始数据
/// @return 睡眠状态 NSArray<WMSleepInfo *>
- (NSArray<DSBLESleepInfo *> * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth30BLESleepAlgorithmConfiguration")
@interface BLESleepAlgorithmConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEConfigurationFileName;)
+ (NSString * _Nonnull)kDSBLEConfigurationFileName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEDayMaxTimeDeepSleep;)
+ (NSString * _Nonnull)kDSBLEDayMaxTimeDeepSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLENightMaxTimeDeepSleep;)
+ (NSString * _Nonnull)kDSBLENightMaxTimeDeepSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEPercLightSleep;)
+ (NSString * _Nonnull)kDSBLEPercLightSleep SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEWakeup;)
+ (NSString * _Nonnull)kDSBLEWakeup SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEDaySleepTime;)
+ (NSString * _Nonnull)kDSBLEDaySleepTime SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEOtherSleepTime;)
+ (NSString * _Nonnull)kDSBLEOtherSleepTime SWIFT_WARN_UNUSED_RESULT;
/// 单例 加载默认设置
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLESleepAlgorithmConfiguration * _Nonnull shared;)
+ (BLESleepAlgorithmConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// 单例 从文件中读取睡眠参数(用于日后可以网络下载参数，进行算法的变更)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BLESleepAlgorithmConfiguration * _Nonnull sharedFromUserDefault;)
+ (BLESleepAlgorithmConfiguration * _Nonnull)sharedFromUserDefault SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14DesayBluetooth19BLESleepAlgorithmF8")
@interface BLESleepAlgorithmF8 : NSObject
- (DSBLESleepInfo * _Nullable)analyzeSleepRawData:(NSArray<DSBLESleepBlock *> * _Nonnull)rawData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEDeviceType : NSUInteger;
enum DSBLEProtocolType : NSUInteger;
enum DSBLEFuncType : NSUInteger;

SWIFT_CLASS("_TtC14DesayBluetooth7BLEUtil")
@interface BLEUtil : NSObject
/// 根据设备名获取设备大类型
/// \param name 设备名
///
///
/// returns:
/// 总类型
+ (enum DSBLEDeviceType)deviceTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名获取设备协议类型
/// \param name 设备名
///
///
/// returns:
/// 设备协议类型
+ (enum DSBLEProtocolType)protocolTypeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 根据厂商代码获取设备名字
/// \param manuCode 厂商代码
///
///
/// returns:
/// 设备名字
+ (NSString * _Nonnull)deviceNameBy:(NSString * _Nonnull)manuCode SWIFT_WARN_UNUSED_RESULT;
/// 根据设备名字获取厂商代码
/// \param name 设备名字
///
///
/// returns:
/// 厂商代码
+ (NSString * _Nonnull)manuCodeBy:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 通过设备名字判断是否包含该功能
/// \param name 设备名字
///
/// \param funcType 功能
///
///
/// returns:
/// 是否包含该功能
+ (BOOL)deviceWithName:(NSString * _Nonnull)name contains:(enum DSBLEFuncType)funcType SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param name 设备名字
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// 是否配对
/// \param identifier identifier
///
///
/// returns:
/// 是否配对
+ (BOOL)isPairByIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14DesayBluetooth6Device")
@interface Device : NSObject
/// 是否就绪
@property (nonatomic, readonly) BOOL isReady;
/// 断开设备
- (void)disconnect;
/// 调用方法
/// \param funcType 功能
///
/// \param data 数据
///
/// \param callback 反馈
///
- (void)makeWithFuncType:(enum DSBLEFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

enum DSBLEAutoType : NSUInteger;
@protocol DSBLEBindDelegate;
@protocol DSBLESyncDelegate;

SWIFT_CLASS("_TtC14DesayBluetooth4Band")
@interface Band : Device
/// 通知代理
@property (nonatomic, copy) void (^ _Nullable notify)(enum DSBLEAutoType, id _Nullable, NSError * _Nullable);
/// 绑定代理
@property (nonatomic, strong) id <DSBLEBindDelegate> _Nullable bindDelegate;
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
- (void)makeWithFuncType:(enum DSBLEFuncType)funcType data:(id _Nullable)data callback:(void (^ _Nullable)(id _Nullable, BOOL, NSError * _Nullable))callback;
@end


/// alarm class
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLEAlarm")
@interface DSBLEAlarm : NSObject
/// Alarm No. Default = 0
@property (nonatomic) NSUInteger alarmNO;
/// Main switch 主开关
@property (nonatomic) BOOL switchStatus;
/// Eg Time: 0800
@property (nonatomic, copy) NSString * _Nonnull alarmTime;
/// Monday switch 周一开关
@property (nonatomic) BOOL mondaySwitch;
/// Tuesday switch 周二开关
@property (nonatomic) BOOL tuesdaySwitch;
/// Wednesday swtich 周三开关
@property (nonatomic) BOOL wednesdaySwitch;
/// Thursday switch 周四开关
@property (nonatomic) BOOL thursdaySwitch;
/// Friday switch 周五开关
@property (nonatomic) BOOL fridaySwitch;
/// Saturday switch 周六开关
@property (nonatomic) BOOL saturdaySwitch;
/// Sunday switch 周日开关
@property (nonatomic) BOOL sundaySwitch;
+ (DSBLEAlarm * _Nullable)alarmWithFormat:(NSString * _Nonnull)format index:(NSUInteger)index SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// ANCS提示设置类
/// ANCS Setting class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEAppNotify")
@interface DSBLEAppNotify : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyPhoneCall;)
+ (NSString * _Nonnull)kDSBLEAppNotifyPhoneCall SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyMessage;)
+ (NSString * _Nonnull)kDSBLEAppNotifyMessage SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWechat;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWechat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyQQ;)
+ (NSString * _Nonnull)kDSBLEAppNotifyQQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyFacebook;)
+ (NSString * _Nonnull)kDSBLEAppNotifyFacebook SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyTwitter;)
+ (NSString * _Nonnull)kDSBLEAppNotifyTwitter SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyEmail;)
+ (NSString * _Nonnull)kDSBLEAppNotifyEmail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWhatsApp;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWhatsApp SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyInstagram;)
+ (NSString * _Nonnull)kDSBLEAppNotifyInstagram SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyLine;)
+ (NSString * _Nonnull)kDSBLEAppNotifyLine SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifySkype;)
+ (NSString * _Nonnull)kDSBLEAppNotifySkype SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDSBLEAppNotifyWeibo;)
+ (NSString * _Nonnull)kDSBLEAppNotifyWeibo SWIFT_WARN_UNUSED_RESULT;
/// create new App Notify
/// \param dict Dictionary include All reminder setting
///
///
/// returns:
/// DSBLEAppNotify instance
+ (DSBLEAppNotify * _Nullable)appNotifyWithDict:(NSDictionary<NSString *, NSNumber *> * _Nonnull)dict SWIFT_WARN_UNUSED_RESULT;
- (void)setAppNotifyWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getAppNoifiyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)allNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)appNotifyKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Bracelet Notify
/// <ul>
///   <li>
///     Auto_CheckHR: Check HR result
///   </li>
///   <li>
///     Auto_SportHR: Real time sport HR
///   </li>
///   <li>
///     Auto_Step: Real time step
///   </li>
///   <li>
///     Auto_FindPhone: Location phone
///   </li>
///   <li>
///     Auto_MusicControl: Musci Control
///   </li>
///   <li>
///     Auto_NoSleep: No sleep
///   </li>
///   <li>
///     Auto_BloodPressure: Blood Pressure
///   </li>
///   <li>
///     Auto_oxygen: HR Oxygen
///   </li>
///   <li>
///     Auto_camera
///   </li>
///   <li>
///     Auto_calorie
///   </li>
///   <li>
///     Auto_pai
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEAutoType) {
  DSBLEAutoTypeOther = 0,
  DSBLEAutoTypeCheckHR = 1,
  DSBLEAutoTypeSportHR = 2,
  DSBLEAutoTypeStep = 3,
  DSBLEAutoTypeFindPhone = 4,
  DSBLEAutoTypeMusicControl = 5,
  DSBLEAutoTypeNoSleep = 6,
  DSBLEAutoTypeBloodPressure = 7,
  DSBLEAutoTypeOxygen = 8,
  DSBLEAutoTypeCamera = 9,
  DSBLEAutoTypeCalorie = 10,
  DSBLEAutoTypePai = 11,
  DSBLEAutoTypeSos = 12,
};

enum DSBLEBindingState : NSUInteger;

/// 绑定 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLEBindDelegate_")
@protocol DSBLEBindDelegate
/// 处理绑定状态
/// \param state 绑定状态
///
- (void)handleBindState:(enum DSBLEBindingState)state;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEBindingState) {
  DSBLEBindingStateIdel = 0,
  DSBLEBindingStateBond = 1,
  DSBLEBindingStateActive = 2,
  DSBLEBindingStateSuccess = 3,
  DSBLEBindingStateFail = 4,
};


/// Blood Pressure class
SWIFT_CLASS("_TtC14DesayBluetooth18DSBLEBloodPressure")
@interface DSBLEBloodPressure : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 心肌收縮（systole） 高压
@property (nonatomic) NSUInteger systole;
/// 心肌舒張（diastole） 低压
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Set Blood Pressure pramas (Only for DS-D8)
SWIFT_CLASS("_TtC14DesayBluetooth21DSBLEBloodPressureSet")
@interface DSBLEBloodPressureSet : NSObject
/// true for begin blood pressure, false for stop blood pressure
@property (nonatomic) BOOL on;
/// systole for proof test value
@property (nonatomic) NSUInteger systole;
/// diastole for proof test value
@property (nonatomic) NSUInteger diastole;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DFU 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth16DSBLEDFUDelegate_")
@protocol DSBLEDFUDelegate
/// DFU进度
/// \param progress 进度
///
- (void)DFUProgress:(float)progress;
/// DFU开始
- (void)DFUStart;
/// DFU结束，成功
- (void)DFUEnd;
/// DFU出错
/// \param error 出错原因
///
- (void)DFUError:(NSString * _Nonnull)error;
@end


/// Set DFU
SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDFUSet")
@interface DSBLEDFUSet : NSObject
/// device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// device MAC 12 count
@property (nonatomic, copy) NSString * _Nonnull deviceMac;
/// file path
@property (nonatomic, copy) NSString * _Nonnull filePath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSBLEScalesData;

SWIFT_CLASS("_TtC14DesayBluetooth11DSBLEDevice")
@interface DSBLEDevice : BLEPeripheral
/// type
@property (nonatomic, readonly) enum DSBLEDeviceType type;
/// MAC len = 12
@property (nonatomic, readonly, copy) NSString * _Nullable mac;
/// OTA? true false
@property (nonatomic, readonly) BOOL state;
/// 2组 称数据
@property (nonatomic, readonly, strong) DSBLEScalesData * _Nullable scalesData;
/// power (50 = 50%)
@property (nonatomic, readonly) NSInteger power;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEDeviceType) {
  DSBLEDeviceTypeBand = 0,
  DSBLEDeviceTypeScales = 1,
  DSBLEDeviceTypeShoe = 2,
  DSBLEDeviceTypeWatch = 3,
  DSBLEDeviceTypeOther = 4,
};

/// Display Mode (Just DS-D6,DS-D8)
/// <ul>
///   <li>
///     Portrait          Screen Display: Portrait
///   </li>
///   <li>
///     LandscapeLeft     Screen Display: Landscape Left
///   </li>
///   <li>
///     LandscapeRight    Screen Display: Landscape Right
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEDisplayType) {
  DSBLEDisplayTypePortrait = 1,
  DSBLEDisplayTypeLandscapeLeft = 2,
  DSBLEDisplayTypeLandscapeRight = 3,
};

/// Send Func Type
/// <ul>
///   <li>
///     Func_Common: Common
///   </li>
///   <li>
///     Func_Alarm: Alarm
///   </li>
///   <li>
///     Func_Target: daily step target
///   </li>
///   <li>
///     Func_Notification: Notification reminder
///   </li>
///   <li>
///     Func_Version: check bracelet version
///   </li>
///   <li>
///     Func_Reboot: Reboot bracelet
///   </li>
///   <li>
///     Func_Bind: Bind braceelt
///   </li>
///   <li>
///     Func_UserInfo: User Info（height,Weight）
///   </li>
///   <li>
///     Func_Battery: Battery of bracelet
///   </li>
///   <li>
///     Func_AutoStep: On/Off realtiem Step
///   </li>
///   <li>
///     Func_Language: Language Setting
///   </li>
///   <li>
///     Func_WristingTime: Wear habit and Writing time
///   </li>
///   <li>
///     Func_Sedentary: Sedentary
///   </li>
///   <li>
///     Func_FindBand: Location the bracelet
///   </li>
///   <li>
///     Func_Active: Active
///   </li>
///   <li>
///     Func_Time: Set Time
///   </li>
///   <li>
///     Func_Timezone: Set timezone
///   </li>
///   <li>
///     Func_DFU: Upgrade braceelt
///   </li>
///   <li>
///     Func_SaveStep: Save step
///   </li>
///   <li>
///     Func_TestHR: Test HR
///   </li>
///   <li>
///     Func_Sync: Sync data from bracelet
///   </li>
///   <li>
///     Func_SyncIcon: Show icon of not in bracelet
///   </li>
///   <li>
///     Func_Camera: Remote Camera
///   </li>
///   <li>
///     Func_FindPhone: Location the Phone
///   </li>
///   <li>
///     Func_MusicControl: Music Control
///   </li>
///   <li>
///     Func_Unit: Unit Set
///   </li>
///   <li>
///     Func_AntiLost: Anti Lost
///   </li>
///   <li>
///     Func_HRMonitor: HR Monitor On/Off
///   </li>
///   <li>
///     Func_MusicStatu: Music Statu
///   </li>
///   <li>
///     Func_24Hour: 12/24 Hour display
///   </li>
///   <li>
///     Func_SportMode: Sport Mode
///   </li>
///   <li>
///     Func_SetPace: Set Pace to bracelet
///   </li>
///   <li>
///     Func_NoSleep: No Sleep On/Off
///   </li>
///   <li>
///     Func_SetRHR: Set Rest Max HR
///   </li>
///   <li>
///     Func_SetDHR: Set Dynamic Max HR
///   </li>
///   <li>
///     Func_Gsensor: Get Gsensor coordinates
///   </li>
///   <li>
///     Func_BloodPressure: Check blood pressure
///   </li>
///   <li>
///     Func_Ancs: use with Func_Notification, first send ancs and then send notification setting
///   </li>
///   <li>
///     Func_SportInfo: Set Sport info
///   </li>
///   <li>
///     Func_Motor: Set Motor Vibration type
///   </li>
///   <li>
///     Func_Reset: Clean all data
///   </li>
///   <li>
///     Func_Display: Srceen Display
///   </li>
///   <li>
///     Func_PAI: Set PAI on/off
///   </li>
///   <li>
///     Func_PAILimits: Search PAI limits
///   </li>
///   <li>
///     Func_PAIHR: Set PAI static and dynamic HR
///   </li>
///   <li>
///     Func_Gender
///   </li>
///   <li>
///     Func_PAITotal: Get PAI Total
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEFuncType) {
  DSBLEFuncTypeNone = 0,
  DSBLEFuncTypeCommon = 1,
  DSBLEFuncTypeAlarm = 2,
  DSBLEFuncTypeTarget = 3,
  DSBLEFuncTypeNotification = 4,
  DSBLEFuncTypeVersion = 5,
  DSBLEFuncTypeReboot = 6,
  DSBLEFuncTypeBind = 7,
  DSBLEFuncTypeUserInfo = 8,
  DSBLEFuncTypeBattery = 9,
  DSBLEFuncTypeAutoStep = 10,
  DSBLEFuncTypeLanguage = 11,
  DSBLEFuncTypeWristingTime = 12,
  DSBLEFuncTypeSedentary = 13,
  DSBLEFuncTypeFindBand = 14,
  DSBLEFuncTypeActive = 15,
  DSBLEFuncTypeTime = 16,
  DSBLEFuncTypeTimezone = 17,
  DSBLEFuncTypeDfu = 18,
  DSBLEFuncTypeSaveStep = 19,
  DSBLEFuncTypeTestHR = 20,
  DSBLEFuncTypeSync = 21,
  DSBLEFuncTypeSyncIcon = 22,
  DSBLEFuncTypeCamera = 23,
  DSBLEFuncTypeFindPhone = 24,
  DSBLEFuncTypeMusicControl = 25,
  DSBLEFuncTypeUnit = 26,
  DSBLEFuncTypeAntiLost = 27,
  DSBLEFuncTypeHrMonitor = 28,
  DSBLEFuncTypeMusicStatu = 29,
  DSBLEFuncTypeHourSystem = 30,
  DSBLEFuncTypeSportMode = 31,
  DSBLEFuncTypeSetPace = 32,
  DSBLEFuncTypeNoSleep = 33,
  DSBLEFuncTypeSetRHR = 34,
  DSBLEFuncTypeSetDHR = 35,
  DSBLEFuncTypeGsensor = 36,
  DSBLEFuncTypeBloodPressure = 37,
  DSBLEFuncTypeAncs = 38,
  DSBLEFuncTypeSportInfo = 39,
  DSBLEFuncTypeMotor = 40,
  DSBLEFuncTypeReset = 41,
  DSBLEFuncTypeDisplay = 42,
  DSBLEFuncTypePai = 43,
  DSBLEFuncTypePaiLimits = 44,
  DSBLEFuncTypePaiHR = 45,
  DSBLEFuncTypeGender = 46,
  DSBLEFuncTypePaiTotal = 47,
  DSBLEFuncTypeClearData = 48,
  DSBLEFuncTypeSn = 49,
  DSBLEFuncTypeTestBP = 50,
  DSBLEFuncTypeConnect = 51,
};

/// Gender
/// <ul>
///   <li>
///     male: Man
///   </li>
///   <li>
///     female: Woman
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEGender) {
  DSBLEGenderMale = 0,
  DSBLEGenderFemale = 1,
};


/// Gsensor coordinate
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEGsensor")
@interface DSBLEGsensor : NSObject
@property (nonatomic) NSInteger x;
@property (nonatomic) NSInteger y;
@property (nonatomic) NSInteger z;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// HeartRate Type
/// <ul>
///   <li>
///     test: test
///   </li>
///   <li>
///     monitor: monitor
///   </li>
///   <li>
///     sport: sport
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEHeartRateType) {
  DSBLEHeartRateTypeTest = 0b00,
  DSBLEHeartRateTypeMonitor = 0b01,
  DSBLEHeartRateTypeSport = 0b11,
};


/// heart rate and blood oxygens class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEHeartrate")
@interface DSBLEHeartrate : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// heart rate value
@property (nonatomic) enum DSBLEHeartRateType type;
/// heart rate value
@property (nonatomic) NSUInteger hr;
/// blood oxygen value
@property (nonatomic) NSUInteger bo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEHourSystemType) {
  DSBLEHourSystemTypeHour12 = 0,
  DSBLEHourSystemTypeHour24 = 1,
};

/// Bracelet Support Language
/// <ul>
///   <li>
///     EN:  English
///   </li>
///   <li>
///     CHS: Chinese
///   </li>
///   <li>
///     FR:  French
///   </li>
///   <li>
///     IT:  Italian
///   </li>
///   <li>
///     ES:  Spanish
///   </li>
///   <li>
///     TR:  Turkish
///   </li>
///   <li>
///     PL:  Polish
///   </li>
///   <li>
///     JP:  Japanese
///   </li>
///   <li>
///     HU:  Hungarian
///   </li>
///   <li>
///     DS:  German
///   </li>
///   <li>
///     RU:  Russian
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLELanguageType) {
  DSBLELanguageTypeEN = 0,
  DSBLELanguageTypeCHS = 1,
  DSBLELanguageTypeFR = 2,
  DSBLELanguageTypeIT = 3,
  DSBLELanguageTypeES = 4,
  DSBLELanguageTypeTR = 5,
  DSBLELanguageTypePL = 6,
  DSBLELanguageTypeJP = 7,
  DSBLELanguageTypeHU = 8,
  DSBLELanguageTypeDS = 9,
  DSBLELanguageTypeRU = 10,
};


/// NoSleep feedback Only for LE
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLENoSleep")
@interface DSBLENoSleep : NSObject
/// total min
@property (nonatomic) NSUInteger total;
/// less time
@property (nonatomic) NSUInteger timeInterval;
/// when set to bracelet, feedback just return ok/err
@property (nonatomic) BOOL isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Heartrate
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEPAIHeartrate")
@interface DSBLEPAIHeartrate : NSObject
/// Static Heartrate
@property (nonatomic) NSUInteger staticHR;
/// Max Heartrate
@property (nonatomic) NSUInteger maxHR;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEPAIValueType : NSUInteger;

/// PAI result info
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEPAIInfo")
@interface DSBLEPAIInfo : NSObject
/// Time for pai
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// Value type
@property (nonatomic) enum DSBLEPAIValueType type;
/// pai
@property (nonatomic) NSUInteger value;
/// pai interval
@property (nonatomic) NSUInteger interval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// PAI Limits Only for LE(HW01-Pro HW02-Plus)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLEPAILimits")
@interface DSBLEPAILimits : NSObject
/// low limits
@property (nonatomic) NSUInteger low;
/// medium limits
@property (nonatomic) NSUInteger medium;
/// high limits
@property (nonatomic) NSUInteger high;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// PAI Seting
/// <ul>
///   <li>
///     off: off
///   </li>
///   <li>
///     normal: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIType) {
  DSBLEPAITypeOff = 0,
  DSBLEPAITypeNormal = 1,
  DSBLEPAITypeHigh = 2,
};


/// PAI value
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEPAIValue")
@interface DSBLEPAIValue : NSObject
/// total Pai
@property (nonatomic) NSUInteger totalPAI;
/// daily Pai
@property (nonatomic) NSUInteger dailyPAI;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// PAI Value Type
/// <ul>
///   <li>
///     low: off
///   </li>
///   <li>
///     medium: Normal mode
///   </li>
///   <li>
///     high: High mode
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEPAIValueType) {
  DSBLEPAIValueTypeLow = 0,
  DSBLEPAIValueTypeMedium = 1,
  DSBLEPAIValueTypeHigh = 2,
};

typedef SWIFT_ENUM(NSUInteger, DSBLEProtocolType) {
  DSBLEProtocolTypeOther = 0,
  DSBLEProtocolTypeBandStandardB103 = 1,
  DSBLEProtocolTypeBandStandardB521 = 2,
  DSBLEProtocolTypeBandMeizu = 3,
  DSBLEProtocolTypeBandD8 = 4,
  DSBLEProtocolTypeBandD6 = 5,
  DSBLEProtocolTypeBandD6A = 6,
  DSBLEProtocolTypeScalesHS10 = 7,
  DSBLEProtocolTypeShoeDS = 8,
};

enum DSBLEScalesType : NSUInteger;

/// Scales sync data
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEScalesData")
@interface DSBLEScalesData : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// type
@property (nonatomic) enum DSBLEScalesType type;
/// weight (g)
@property (nonatomic) float weight;
/// impedance
@property (nonatomic) NSUInteger impedance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSUInteger, DSBLEScalesType) {
  DSBLEScalesTypeNone = 0,
  DSBLEScalesTypeFat = 1,
  DSBLEScalesTypeBody = 2,
  DSBLEScalesTypeBaby = 3,
  DSBLEScalesTypeKitchen = 4,
};


/// 扫描 连接 过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth24DSBLEScanConnectDelegate_")
@protocol DSBLEScanConnectDelegate
@optional
/// 蓝牙状态改变反馈
/// \param state state
///
- (void)notifyState:(enum BLEManagerState)state;
/// 扫描发现设备
/// \param device device
///
- (void)didDiscoverDevice:(DSBLEDevice * _Nonnull)device;
/// 准备连接DFU设备
/// \param device device
///
- (void)connectDFUDevice:(DSBLEDevice * _Nonnull)device;
/// 连接设备
/// \param device device
///
- (void)didConnectDevice:(DSBLEDevice * _Nonnull)device;
/// 断开设备
/// \param device device
///
- (void)didDisconnectDevice:(DSBLEDevice * _Nonnull)device;
@end


/// 久坐数据
/// sedentary reminder class
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESedentary")
@interface DSBLESedentary : NSObject
/// Sedentary time.
/// During this time,bracelet will calculate the steps,if not reach the min steps,bracelet will notify user.
/// 30=30 Min
/// 60=60 Min
/// 75=75 Min
/// 90=90 Min
@property (nonatomic) NSUInteger sedentaryTime;
/// Yes for Sedentary reminder ON
/// No for Sedentary reminde OFF
@property (nonatomic) BOOL swtich;
/// Date time for bracelet start check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull startTime;
/// Date time for bracelet stop check the Sedentary
@property (nonatomic, copy) NSDate * _Nonnull endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Shop real time step
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLEShoeRTStep")
@interface DSBLEShoeRTStep : NSObject
/// walk step
@property (nonatomic) uint32_t walk;
/// run step
@property (nonatomic) uint32_t run;
/// cycle step
@property (nonatomic) uint32_t cycle;
/// downstairs step
@property (nonatomic) uint32_t downstairs;
/// upstairs step
@property (nonatomic) uint32_t upstairs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEShoeStepType : NSUInteger;

/// Shop sync data
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEShoeStepInfo")
@interface DSBLEShoeStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// step type
@property (nonatomic) enum DSBLEShoeStepType type;
/// step
@property (nonatomic) uint32_t step;
/// Duration
@property (nonatomic) NSUInteger duration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Shoe Step type
/// <ul>
///   <li>
///     0 other: Sit/Static
///   </li>
///   <li>
///     1 walk:  walk
///   </li>
///   <li>
///     2 run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEShoeStepType) {
  DSBLEShoeStepTypeOther = 0,
  DSBLEShoeStepTypeWalk = 1,
  DSBLEShoeStepTypeRun = 2,
  DSBLEShoeStepTypeDown = 3,
  DSBLEShoeStepTypeUp = 4,
  DSBLEShoeStepTypeCycle = 5,
};

enum DSBLESleepValueType : NSUInteger;
enum DSBLESleepBlockType : NSUInteger;

/// Original sleep info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepBlock")
@interface DSBLESleepBlock : NSObject
/// Time for sleep state.
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// sleep state
@property (nonatomic) enum DSBLESleepValueType value;
/// block type
@property (nonatomic) enum DSBLESleepBlockType type;
/// timeinterval from 2010.1.1 00:00:00
@property (nonatomic) NSUInteger timeInterval;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep block type
/// <ul>
///   <li>
///     0 start: Begin
///   </li>
///   <li>
///     1 entry: Entry sleep
///   </li>
///   <li>
///     2 deep:  Sleeping
///   </li>
///   <li>
///     3 end:   End
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepBlockType) {
  DSBLESleepBlockTypeStart = 0,
  DSBLESleepBlockTypeEntry = 1,
  DSBLESleepBlockTypeDeep = 2,
  DSBLESleepBlockTypeEnd = 3,
};

@class DSBLESleepState;

/// Sleep result model
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESleepInfo")
@interface DSBLESleepInfo : NSObject
/// Begin Time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
/// End time for sleep
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
/// light Sleep Duration
@property (nonatomic) NSUInteger lightSleepDuration;
/// deep Sleep Duration
@property (nonatomic) NSUInteger deepSleepDuration;
/// awake duration
@property (nonatomic) NSUInteger awakeDuration;
/// sleep state array
@property (nonatomic, copy) NSArray<DSBLESleepState *> * _Nonnull sleepStates;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESleepType : NSUInteger;

/// Sleep state info
SWIFT_CLASS("_TtC14DesayBluetooth15DSBLESleepState")
@interface DSBLESleepState : NSObject
@property (nonatomic, copy) NSDate * _Null_unspecified beginTime;
@property (nonatomic, copy) NSDate * _Null_unspecified endTime;
@property (nonatomic) enum DSBLESleepType state;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// sleep state for app – app sleep info
/// <ul>
///   <li>
///     0 awake: Wake up
///   </li>
///   <li>
///     2 light: Light Sleep
///   </li>
///   <li>
///     3 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepType) {
  DSBLESleepTypeAwake = 0,
  DSBLESleepTypeLight = 2,
  DSBLESleepTypeDeep = 3,
};

/// sleep state for Algorithm — Original sleep info
/// <ul>
///   <li>
///     0  none: None
///   </li>
///   <li>
///     1  wake: Wake up
///   </li>
///   <li>
///     2  walk: Wake And Walk
///   </li>
///   <li>
///     3  run: Wake And Run
///   </li>
///   <li>
///     11 light: Light Sleep
///   </li>
///   <li>
///     12 deep: Deep Sleep
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESleepValueType) {
  DSBLESleepValueTypeNone = 0,
  DSBLESleepValueTypeWake = 1,
  DSBLESleepValueTypeWalk = 2,
  DSBLESleepValueTypeRun = 3,
  DSBLESleepValueTypeLight = 11,
  DSBLESleepValueTypeDeep = 12,
};

enum DSBLESyncSportType : NSUInteger;

/// Sync Sport
SWIFT_CLASS("_TtC14DesayBluetooth10DSBLESport")
@interface DSBLESport : NSObject
/// time
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// 类型
@property (nonatomic) enum DSBLESyncSportType type;
/// 步数
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Sport info (sync to bracelet) for sport mode (Only for MZ,DS-D9)
SWIFT_CLASS("_TtC14DesayBluetooth14DSBLESportInfo")
@interface DSBLESportInfo : NSObject
/// Set time,Unit(s) when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
/// Set distance,Unit(m)
@property (nonatomic) NSUInteger distance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLESportState : NSUInteger;
enum DSBLESportType : NSUInteger;

/// Sport set class for sport mode
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESportSet")
@interface DSBLESportSet : NSObject
/// Set sport state,control bracelet to start or stop sport Mode. (All bracelet except B103)
@property (nonatomic) enum DSBLESportState state;
/// Set sport type. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) enum DSBLESportType type;
/// Set time,Unit(s)  when continue sport. For state = start, time set to 0. (This attribute in MZ,DS-D9 will take effect)
@property (nonatomic) NSUInteger time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Sport state
/// <ul>
///   <li>
///     0 stop   default
///   </li>
///   <li>
///     1 start
///   </li>
///   <li>
///     2 pause
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESportState) {
  DSBLESportStateStop = 0,
  DSBLESportStateStart = 1,
  DSBLESportStatePause = 2,
};

/// Sport type
/// <ul>
///   <li>
///     0 run
///   </li>
///   <li>
///     1 cycling
///   </li>
///   <li>
///     2 Strength
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESportType) {
  DSBLESportTypeRun = 0,
  DSBLESportTypeCycling = 1,
  DSBLESportTypeStrength = 2,
};

enum DSBLEStepType : NSUInteger;

/// step info class
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEStepInfo")
@interface DSBLEStepInfo : NSObject
/// step time (end)
@property (nonatomic, copy) NSDate * _Null_unspecified time;
/// step type
@property (nonatomic) enum DSBLEStepType type;
/// step
@property (nonatomic) NSUInteger step;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// step type
/// <ul>
///   <li>
///     0 other: Sit/Static
///   </li>
///   <li>
///     1 walk:  walk
///   </li>
///   <li>
///     2 run:   run
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEStepType) {
  DSBLEStepTypeOther = 1,
  DSBLEStepTypeWalk = 2,
  DSBLEStepTypeRun = 3,
};


SWIFT_CLASS("_TtC14DesayBluetooth13DSBLESyncData")
@interface DSBLESyncData : NSObject
/// Original sleeps
@property (nonatomic, copy) NSArray<DSBLESleepBlock *> * _Nonnull sleeps;
/// Steps
@property (nonatomic, copy) NSArray<DSBLEStepInfo *> * _Nonnull steps;
/// heartrates & bloodoxygen
@property (nonatomic, copy) NSArray<DSBLEHeartrate *> * _Nonnull heartratesAndBloodOxygens;
/// BloodPressure
@property (nonatomic, copy) NSArray<DSBLEBloodPressure *> * _Nonnull bloodPressures;
/// PAI
@property (nonatomic, copy) NSArray<DSBLEPAIInfo *> * _Nonnull pais;
/// Sport
@property (nonatomic, copy) NSArray<DSBLESport *> * _Nonnull sports;
/// Shoe Steps
@property (nonatomic, copy) NSArray<DSBLEShoeStepInfo *> * _Nonnull shoeSteps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 同步过程
SWIFT_PROTOCOL("_TtP14DesayBluetooth17DSBLESyncDelegate_")
@protocol DSBLESyncDelegate
/// 同步数据 进度
/// progress of data synchronization
/// \param progress progress 进度值(0.0-1.0) progress value
///
///
/// returns:
/// progress
- (void)syncProgressWithProgress:(float)progress;
/// 即将开始同步
/// Sync is about to begin
- (void)syncWillStart;
/// 同步即将结束
/// Syncing is coming to an end
- (void)syncWillEnd;
/// 同步出错
/// An error occurred attempting to synchronize
- (void)syncError;
/// synchronized data(同步后的数据)
/// \param syncData DSBLESyncData
///
- (void)syncFinishedWithSyncResultData:(DSBLESyncData * _Nullable)syncData;
@end

/// Sync Sport Type
/// <ul>
///   <li>
///     start: start
///   </li>
///   <li>
///     stop: stop
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLESyncSportType) {
  DSBLESyncSportTypeStart = 0b00,
  DSBLESyncSportTypeStop = 0b01,
};

/// Unit System
/// <ul>
///   <li>
///     MS: Metric system
///   </li>
///   <li>
///     BS: British system
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEUnitType) {
  DSBLEUnitTypeBS = 0,
  DSBLEUnitTypeMS = 1,
};


/// User information setting
SWIFT_CLASS("_TtC14DesayBluetooth13DSBLEUserInfo")
@interface DSBLEUserInfo : NSObject
/// Height Range(100~250)cm
@property (nonatomic) NSUInteger height;
/// Weight Range(25~200)kg
@property (nonatomic) NSUInteger weight;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Version information
SWIFT_CLASS("_TtC14DesayBluetooth12DSBLEVersion")
@interface DSBLEVersion : NSObject
/// User display
@property (nonatomic, copy) NSString * _Nonnull display;
/// Version,use it to judge upgrade firmware.
@property (nonatomic) NSUInteger version;
/// Vendor code
@property (nonatomic, copy) NSString * _Nonnull vendor;
/// Original data
@property (nonatomic, copy) NSString * _Nonnull data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DSBLEVibrationType : NSUInteger;

/// Set Vibration pramas (Only for DS-D8,DS-D9,DS-D6,HW01)
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEVibrationSet")
@interface DSBLEVibrationSet : NSObject
/// Vibration type
@property (nonatomic) enum DSBLEVibrationType type;
/// true for open motor vibration, false for close motor vibration
@property (nonatomic) BOOL on;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Motor vibration strength
typedef SWIFT_ENUM(NSUInteger, DSBLEVibrationType) {
  DSBLEVibrationTypeLow = 1,
  DSBLEVibrationTypeMiddle = 2,
  DSBLEVibrationTypeHigh = 3,
};

enum DSBLEWristingType : NSUInteger;

/// Wristing Time setting Model
SWIFT_CLASS("_TtC14DesayBluetooth17DSBLEWristingTime")
@interface DSBLEWristingTime : NSObject
@property (nonatomic) enum DSBLEWristingType wristingType;
/// Wristing Time extend setting Model (Not include: B521 B103 B502)
/// Add startTime and endTime.
/// start time.
@property (nonatomic, copy) NSDate * _Nullable startTime;
/// end  time.
@property (nonatomic, copy) NSDate * _Nullable endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Wristing time type
/// wearHabit Which hand to wear
/// <ul>
///   <li>
///     off: 0
///   </li>
///   <li>
///     auto: 1 not all bracelet support this type
///   </li>
///   <li>
///     left: 2
///   </li>
///   <li>
///     right: 3
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSUInteger, DSBLEWristingType) {
  DSBLEWristingTypeOff = 0,
  DSBLEWristingTypeAuto = 1,
  DSBLEWristingTypeLeft = 2,
  DSBLEWristingTypeRight = 3,
};





SWIFT_CLASS("_TtC14DesayBluetooth6Scales")
@interface Scales : Device
@end


SWIFT_CLASS("_TtC14DesayBluetooth4Shoe")
@interface Shoe : Device
/// 同步代理
@property (nonatomic, strong) id <DSBLESyncDelegate> _Nullable syncDelegate;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
